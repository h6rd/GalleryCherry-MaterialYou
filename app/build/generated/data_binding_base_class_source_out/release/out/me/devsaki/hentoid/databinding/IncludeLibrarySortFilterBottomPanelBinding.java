// Generated by view binder compiler. Do not edit!
package me.devsaki.hentoid.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.Barrier;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.button.MaterialButtonToggleGroup;
import com.google.android.material.divider.MaterialDivider;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import me.devsaki.hentoid.R;

public final class IncludeLibrarySortFilterBottomPanelBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView filterCompletedBtn;

  @NonNull
  public final ImageView filterFavsBtn;

  @NonNull
  public final ImageView filterNotCompletedBtn;

  @NonNull
  public final ImageView filterRating1;

  @NonNull
  public final ImageView filterRating2;

  @NonNull
  public final ImageView filterRating3;

  @NonNull
  public final ImageView filterRating4;

  @NonNull
  public final ImageView filterRating5;

  @NonNull
  public final ImageView filterRatingNone;

  @NonNull
  public final TextView filterTxt;

  @NonNull
  public final Barrier filterVerticalBarrier;

  @NonNull
  public final MaterialDivider filtersDivider;

  @NonNull
  public final Barrier horizontalBarrier;

  @NonNull
  public final RecyclerView list;

  @NonNull
  public final MaterialButtonToggleGroup sortAscDesc;

  @NonNull
  public final MaterialButton sortAscending;

  @NonNull
  public final MaterialButton sortDescending;

  @NonNull
  public final MaterialButton sortRandom;

  private IncludeLibrarySortFilterBottomPanelBinding(@NonNull ConstraintLayout rootView,
      @NonNull ImageView filterCompletedBtn, @NonNull ImageView filterFavsBtn,
      @NonNull ImageView filterNotCompletedBtn, @NonNull ImageView filterRating1,
      @NonNull ImageView filterRating2, @NonNull ImageView filterRating3,
      @NonNull ImageView filterRating4, @NonNull ImageView filterRating5,
      @NonNull ImageView filterRatingNone, @NonNull TextView filterTxt,
      @NonNull Barrier filterVerticalBarrier, @NonNull MaterialDivider filtersDivider,
      @NonNull Barrier horizontalBarrier, @NonNull RecyclerView list,
      @NonNull MaterialButtonToggleGroup sortAscDesc, @NonNull MaterialButton sortAscending,
      @NonNull MaterialButton sortDescending, @NonNull MaterialButton sortRandom) {
    this.rootView = rootView;
    this.filterCompletedBtn = filterCompletedBtn;
    this.filterFavsBtn = filterFavsBtn;
    this.filterNotCompletedBtn = filterNotCompletedBtn;
    this.filterRating1 = filterRating1;
    this.filterRating2 = filterRating2;
    this.filterRating3 = filterRating3;
    this.filterRating4 = filterRating4;
    this.filterRating5 = filterRating5;
    this.filterRatingNone = filterRatingNone;
    this.filterTxt = filterTxt;
    this.filterVerticalBarrier = filterVerticalBarrier;
    this.filtersDivider = filtersDivider;
    this.horizontalBarrier = horizontalBarrier;
    this.list = list;
    this.sortAscDesc = sortAscDesc;
    this.sortAscending = sortAscending;
    this.sortDescending = sortDescending;
    this.sortRandom = sortRandom;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static IncludeLibrarySortFilterBottomPanelBinding inflate(
      @NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static IncludeLibrarySortFilterBottomPanelBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.include_library_sort_filter_bottom_panel, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static IncludeLibrarySortFilterBottomPanelBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.filter_completed_btn;
      ImageView filterCompletedBtn = ViewBindings.findChildViewById(rootView, id);
      if (filterCompletedBtn == null) {
        break missingId;
      }

      id = R.id.filter_favs_btn;
      ImageView filterFavsBtn = ViewBindings.findChildViewById(rootView, id);
      if (filterFavsBtn == null) {
        break missingId;
      }

      id = R.id.filter_not_completed_btn;
      ImageView filterNotCompletedBtn = ViewBindings.findChildViewById(rootView, id);
      if (filterNotCompletedBtn == null) {
        break missingId;
      }

      id = R.id.filter_rating_1;
      ImageView filterRating1 = ViewBindings.findChildViewById(rootView, id);
      if (filterRating1 == null) {
        break missingId;
      }

      id = R.id.filter_rating_2;
      ImageView filterRating2 = ViewBindings.findChildViewById(rootView, id);
      if (filterRating2 == null) {
        break missingId;
      }

      id = R.id.filter_rating_3;
      ImageView filterRating3 = ViewBindings.findChildViewById(rootView, id);
      if (filterRating3 == null) {
        break missingId;
      }

      id = R.id.filter_rating_4;
      ImageView filterRating4 = ViewBindings.findChildViewById(rootView, id);
      if (filterRating4 == null) {
        break missingId;
      }

      id = R.id.filter_rating_5;
      ImageView filterRating5 = ViewBindings.findChildViewById(rootView, id);
      if (filterRating5 == null) {
        break missingId;
      }

      id = R.id.filter_rating_none;
      ImageView filterRatingNone = ViewBindings.findChildViewById(rootView, id);
      if (filterRatingNone == null) {
        break missingId;
      }

      id = R.id.filter_txt;
      TextView filterTxt = ViewBindings.findChildViewById(rootView, id);
      if (filterTxt == null) {
        break missingId;
      }

      id = R.id.filter_vertical_barrier;
      Barrier filterVerticalBarrier = ViewBindings.findChildViewById(rootView, id);
      if (filterVerticalBarrier == null) {
        break missingId;
      }

      id = R.id.filters_divider;
      MaterialDivider filtersDivider = ViewBindings.findChildViewById(rootView, id);
      if (filtersDivider == null) {
        break missingId;
      }

      id = R.id.horizontal_barrier;
      Barrier horizontalBarrier = ViewBindings.findChildViewById(rootView, id);
      if (horizontalBarrier == null) {
        break missingId;
      }

      id = R.id.list;
      RecyclerView list = ViewBindings.findChildViewById(rootView, id);
      if (list == null) {
        break missingId;
      }

      id = R.id.sort_asc_desc;
      MaterialButtonToggleGroup sortAscDesc = ViewBindings.findChildViewById(rootView, id);
      if (sortAscDesc == null) {
        break missingId;
      }

      id = R.id.sort_ascending;
      MaterialButton sortAscending = ViewBindings.findChildViewById(rootView, id);
      if (sortAscending == null) {
        break missingId;
      }

      id = R.id.sort_descending;
      MaterialButton sortDescending = ViewBindings.findChildViewById(rootView, id);
      if (sortDescending == null) {
        break missingId;
      }

      id = R.id.sort_random;
      MaterialButton sortRandom = ViewBindings.findChildViewById(rootView, id);
      if (sortRandom == null) {
        break missingId;
      }

      return new IncludeLibrarySortFilterBottomPanelBinding((ConstraintLayout) rootView,
          filterCompletedBtn, filterFavsBtn, filterNotCompletedBtn, filterRating1, filterRating2,
          filterRating3, filterRating4, filterRating5, filterRatingNone, filterTxt,
          filterVerticalBarrier, filtersDivider, horizontalBarrier, list, sortAscDesc,
          sortAscending, sortDescending, sortRandom);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
