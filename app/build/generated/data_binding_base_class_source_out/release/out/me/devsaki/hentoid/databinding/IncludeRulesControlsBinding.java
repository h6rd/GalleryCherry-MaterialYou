// Generated by view binder compiler. Do not edit!
package me.devsaki.hentoid.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.button.MaterialButtonToggleGroup;
import com.google.android.material.divider.MaterialDivider;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import me.devsaki.hentoid.R;

public final class IncludeRulesControlsBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final RecyclerView fieldList;

  @NonNull
  public final MaterialDivider filtersDivider;

  @NonNull
  public final MaterialButtonToggleGroup sortAscDesc;

  @NonNull
  public final MaterialButton sortAscending;

  @NonNull
  public final MaterialButton sortDescending;

  @NonNull
  public final RecyclerView tagFilter;

  private IncludeRulesControlsBinding(@NonNull ConstraintLayout rootView,
      @NonNull RecyclerView fieldList, @NonNull MaterialDivider filtersDivider,
      @NonNull MaterialButtonToggleGroup sortAscDesc, @NonNull MaterialButton sortAscending,
      @NonNull MaterialButton sortDescending, @NonNull RecyclerView tagFilter) {
    this.rootView = rootView;
    this.fieldList = fieldList;
    this.filtersDivider = filtersDivider;
    this.sortAscDesc = sortAscDesc;
    this.sortAscending = sortAscending;
    this.sortDescending = sortDescending;
    this.tagFilter = tagFilter;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static IncludeRulesControlsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static IncludeRulesControlsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.include_rules_controls, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static IncludeRulesControlsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.field_list;
      RecyclerView fieldList = ViewBindings.findChildViewById(rootView, id);
      if (fieldList == null) {
        break missingId;
      }

      id = R.id.filters_divider;
      MaterialDivider filtersDivider = ViewBindings.findChildViewById(rootView, id);
      if (filtersDivider == null) {
        break missingId;
      }

      id = R.id.sort_asc_desc;
      MaterialButtonToggleGroup sortAscDesc = ViewBindings.findChildViewById(rootView, id);
      if (sortAscDesc == null) {
        break missingId;
      }

      id = R.id.sort_ascending;
      MaterialButton sortAscending = ViewBindings.findChildViewById(rootView, id);
      if (sortAscending == null) {
        break missingId;
      }

      id = R.id.sort_descending;
      MaterialButton sortDescending = ViewBindings.findChildViewById(rootView, id);
      if (sortDescending == null) {
        break missingId;
      }

      id = R.id.tag_filter;
      RecyclerView tagFilter = ViewBindings.findChildViewById(rootView, id);
      if (tagFilter == null) {
        break missingId;
      }

      return new IncludeRulesControlsBinding((ConstraintLayout) rootView, fieldList, filtersDivider,
          sortAscDesc, sortAscending, sortDescending, tagFilter);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
