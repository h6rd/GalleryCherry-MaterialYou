// Generated by view binder compiler. Do not edit!
package me.devsaki.hentoid.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import me.devsaki.hentoid.R;
import me.devsaki.hentoid.views.ListPickerView;

public final class IncludeDuplicateControlsBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ProgressBar detectBooksPb;

  @NonNull
  public final TextView detectBooksPbTxt;

  @NonNull
  public final TextView detectBooksTxt;

  @NonNull
  public final Guideline guidelineMiddle;

  @NonNull
  public final CheckBox ignoreChapters;

  @NonNull
  public final ProgressBar indexPicturesPb;

  @NonNull
  public final TextView indexPicturesPbTxt;

  @NonNull
  public final TextView indexPicturesTxt;

  @NonNull
  public final TextView scanFab;

  @NonNull
  public final TextView stopFab;

  @NonNull
  public final CheckBox useArtist;

  @NonNull
  public final CheckBox useCover;

  @NonNull
  public final CheckBox useSameLanguage;

  @NonNull
  public final ListPickerView useSensitivity;

  @NonNull
  public final TextView useSensitivityTxt;

  @NonNull
  public final CheckBox useTitle;

  private IncludeDuplicateControlsBinding(@NonNull ConstraintLayout rootView,
      @NonNull ProgressBar detectBooksPb, @NonNull TextView detectBooksPbTxt,
      @NonNull TextView detectBooksTxt, @NonNull Guideline guidelineMiddle,
      @NonNull CheckBox ignoreChapters, @NonNull ProgressBar indexPicturesPb,
      @NonNull TextView indexPicturesPbTxt, @NonNull TextView indexPicturesTxt,
      @NonNull TextView scanFab, @NonNull TextView stopFab, @NonNull CheckBox useArtist,
      @NonNull CheckBox useCover, @NonNull CheckBox useSameLanguage,
      @NonNull ListPickerView useSensitivity, @NonNull TextView useSensitivityTxt,
      @NonNull CheckBox useTitle) {
    this.rootView = rootView;
    this.detectBooksPb = detectBooksPb;
    this.detectBooksPbTxt = detectBooksPbTxt;
    this.detectBooksTxt = detectBooksTxt;
    this.guidelineMiddle = guidelineMiddle;
    this.ignoreChapters = ignoreChapters;
    this.indexPicturesPb = indexPicturesPb;
    this.indexPicturesPbTxt = indexPicturesPbTxt;
    this.indexPicturesTxt = indexPicturesTxt;
    this.scanFab = scanFab;
    this.stopFab = stopFab;
    this.useArtist = useArtist;
    this.useCover = useCover;
    this.useSameLanguage = useSameLanguage;
    this.useSensitivity = useSensitivity;
    this.useSensitivityTxt = useSensitivityTxt;
    this.useTitle = useTitle;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static IncludeDuplicateControlsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static IncludeDuplicateControlsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.include_duplicate_controls, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static IncludeDuplicateControlsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.detect_books_pb;
      ProgressBar detectBooksPb = ViewBindings.findChildViewById(rootView, id);
      if (detectBooksPb == null) {
        break missingId;
      }

      id = R.id.detect_books_pb_txt;
      TextView detectBooksPbTxt = ViewBindings.findChildViewById(rootView, id);
      if (detectBooksPbTxt == null) {
        break missingId;
      }

      id = R.id.detect_books_txt;
      TextView detectBooksTxt = ViewBindings.findChildViewById(rootView, id);
      if (detectBooksTxt == null) {
        break missingId;
      }

      id = R.id.guideline_middle;
      Guideline guidelineMiddle = ViewBindings.findChildViewById(rootView, id);
      if (guidelineMiddle == null) {
        break missingId;
      }

      id = R.id.ignore_chapters;
      CheckBox ignoreChapters = ViewBindings.findChildViewById(rootView, id);
      if (ignoreChapters == null) {
        break missingId;
      }

      id = R.id.index_pictures_pb;
      ProgressBar indexPicturesPb = ViewBindings.findChildViewById(rootView, id);
      if (indexPicturesPb == null) {
        break missingId;
      }

      id = R.id.index_pictures_pb_txt;
      TextView indexPicturesPbTxt = ViewBindings.findChildViewById(rootView, id);
      if (indexPicturesPbTxt == null) {
        break missingId;
      }

      id = R.id.index_pictures_txt;
      TextView indexPicturesTxt = ViewBindings.findChildViewById(rootView, id);
      if (indexPicturesTxt == null) {
        break missingId;
      }

      id = R.id.scan_fab;
      TextView scanFab = ViewBindings.findChildViewById(rootView, id);
      if (scanFab == null) {
        break missingId;
      }

      id = R.id.stop_fab;
      TextView stopFab = ViewBindings.findChildViewById(rootView, id);
      if (stopFab == null) {
        break missingId;
      }

      id = R.id.use_artist;
      CheckBox useArtist = ViewBindings.findChildViewById(rootView, id);
      if (useArtist == null) {
        break missingId;
      }

      id = R.id.use_cover;
      CheckBox useCover = ViewBindings.findChildViewById(rootView, id);
      if (useCover == null) {
        break missingId;
      }

      id = R.id.use_same_language;
      CheckBox useSameLanguage = ViewBindings.findChildViewById(rootView, id);
      if (useSameLanguage == null) {
        break missingId;
      }

      id = R.id.use_sensitivity;
      ListPickerView useSensitivity = ViewBindings.findChildViewById(rootView, id);
      if (useSensitivity == null) {
        break missingId;
      }

      id = R.id.use_sensitivity_txt;
      TextView useSensitivityTxt = ViewBindings.findChildViewById(rootView, id);
      if (useSensitivityTxt == null) {
        break missingId;
      }

      id = R.id.use_title;
      CheckBox useTitle = ViewBindings.findChildViewById(rootView, id);
      if (useTitle == null) {
        break missingId;
      }

      return new IncludeDuplicateControlsBinding((ConstraintLayout) rootView, detectBooksPb,
          detectBooksPbTxt, detectBooksTxt, guidelineMiddle, ignoreChapters, indexPicturesPb,
          indexPicturesPbTxt, indexPicturesTxt, scanFab, stopFab, useArtist, useCover,
          useSameLanguage, useSensitivity, useSensitivityTxt, useTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
