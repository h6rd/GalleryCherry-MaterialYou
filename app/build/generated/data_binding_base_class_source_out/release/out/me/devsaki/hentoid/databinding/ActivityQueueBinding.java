// Generated by view binder compiler. Do not edit!
package me.devsaki.hentoid.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import androidx.viewpager2.widget.ViewPager2;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.tabs.TabLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import me.devsaki.hentoid.R;

public final class ActivityQueueBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialButton downloadReviveCancel;

  @NonNull
  public final ProgressBar downloadReviveProgress;

  @NonNull
  public final TextView downloadReviveTxt;

  @NonNull
  public final ViewPager2 queuePager;

  @NonNull
  public final Toolbar queueSelectionToolbar;

  @NonNull
  public final TabLayout queueTabs;

  @NonNull
  public final Toolbar queueToolbar;

  @NonNull
  public final CoordinatorLayout snackbarLocation;

  private ActivityQueueBinding(@NonNull ConstraintLayout rootView,
      @NonNull MaterialButton downloadReviveCancel, @NonNull ProgressBar downloadReviveProgress,
      @NonNull TextView downloadReviveTxt, @NonNull ViewPager2 queuePager,
      @NonNull Toolbar queueSelectionToolbar, @NonNull TabLayout queueTabs,
      @NonNull Toolbar queueToolbar, @NonNull CoordinatorLayout snackbarLocation) {
    this.rootView = rootView;
    this.downloadReviveCancel = downloadReviveCancel;
    this.downloadReviveProgress = downloadReviveProgress;
    this.downloadReviveTxt = downloadReviveTxt;
    this.queuePager = queuePager;
    this.queueSelectionToolbar = queueSelectionToolbar;
    this.queueTabs = queueTabs;
    this.queueToolbar = queueToolbar;
    this.snackbarLocation = snackbarLocation;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityQueueBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityQueueBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_queue, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityQueueBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.download_revive_cancel;
      MaterialButton downloadReviveCancel = ViewBindings.findChildViewById(rootView, id);
      if (downloadReviveCancel == null) {
        break missingId;
      }

      id = R.id.download_revive_progress;
      ProgressBar downloadReviveProgress = ViewBindings.findChildViewById(rootView, id);
      if (downloadReviveProgress == null) {
        break missingId;
      }

      id = R.id.download_revive_txt;
      TextView downloadReviveTxt = ViewBindings.findChildViewById(rootView, id);
      if (downloadReviveTxt == null) {
        break missingId;
      }

      id = R.id.queue_pager;
      ViewPager2 queuePager = ViewBindings.findChildViewById(rootView, id);
      if (queuePager == null) {
        break missingId;
      }

      id = R.id.queue_selection_toolbar;
      Toolbar queueSelectionToolbar = ViewBindings.findChildViewById(rootView, id);
      if (queueSelectionToolbar == null) {
        break missingId;
      }

      id = R.id.queue_tabs;
      TabLayout queueTabs = ViewBindings.findChildViewById(rootView, id);
      if (queueTabs == null) {
        break missingId;
      }

      id = R.id.queue_toolbar;
      Toolbar queueToolbar = ViewBindings.findChildViewById(rootView, id);
      if (queueToolbar == null) {
        break missingId;
      }

      id = R.id.snackbar_location;
      CoordinatorLayout snackbarLocation = ViewBindings.findChildViewById(rootView, id);
      if (snackbarLocation == null) {
        break missingId;
      }

      return new ActivityQueueBinding((ConstraintLayout) rootView, downloadReviveCancel,
          downloadReviveProgress, downloadReviveTxt, queuePager, queueSelectionToolbar, queueTabs,
          queueToolbar, snackbarLocation);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
