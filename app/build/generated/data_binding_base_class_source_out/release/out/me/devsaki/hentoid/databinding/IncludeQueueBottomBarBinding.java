// Generated by view binder compiler. Do not edit!
package me.devsaki.hentoid.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.progressindicator.CircularProgressIndicator;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import me.devsaki.hentoid.R;

public final class IncludeQueueBottomBarBinding implements ViewBinding {
  @NonNull
  private final View rootView;

  @NonNull
  public final ImageButton actionButton;

  @NonNull
  public final ConstraintLayout backgroundBottomBar;

  @NonNull
  public final CircularProgressIndicator queueDownloadPreparationProgressBar;

  @NonNull
  public final TextView queueInfo;

  @NonNull
  public final TextView queueStatus;

  private IncludeQueueBottomBarBinding(@NonNull View rootView, @NonNull ImageButton actionButton,
      @NonNull ConstraintLayout backgroundBottomBar,
      @NonNull CircularProgressIndicator queueDownloadPreparationProgressBar,
      @NonNull TextView queueInfo, @NonNull TextView queueStatus) {
    this.rootView = rootView;
    this.actionButton = actionButton;
    this.backgroundBottomBar = backgroundBottomBar;
    this.queueDownloadPreparationProgressBar = queueDownloadPreparationProgressBar;
    this.queueInfo = queueInfo;
    this.queueStatus = queueStatus;
  }

  @Override
  @NonNull
  public View getRoot() {
    return rootView;
  }

  @NonNull
  public static IncludeQueueBottomBarBinding inflate(@NonNull LayoutInflater inflater,
      @NonNull ViewGroup parent) {
    if (parent == null) {
      throw new NullPointerException("parent");
    }
    inflater.inflate(R.layout.include_queue_bottom_bar, parent);
    return bind(parent);
  }

  @NonNull
  public static IncludeQueueBottomBarBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.action_button;
      ImageButton actionButton = ViewBindings.findChildViewById(rootView, id);
      if (actionButton == null) {
        break missingId;
      }

      id = R.id.background_bottom_bar;
      ConstraintLayout backgroundBottomBar = ViewBindings.findChildViewById(rootView, id);
      if (backgroundBottomBar == null) {
        break missingId;
      }

      id = R.id.queueDownloadPreparationProgressBar;
      CircularProgressIndicator queueDownloadPreparationProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (queueDownloadPreparationProgressBar == null) {
        break missingId;
      }

      id = R.id.queueInfo;
      TextView queueInfo = ViewBindings.findChildViewById(rootView, id);
      if (queueInfo == null) {
        break missingId;
      }

      id = R.id.queueStatus;
      TextView queueStatus = ViewBindings.findChildViewById(rootView, id);
      if (queueStatus == null) {
        break missingId;
      }

      return new IncludeQueueBottomBarBinding(rootView, actionButton, backgroundBottomBar,
          queueDownloadPreparationProgressBar, queueInfo, queueStatus);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
