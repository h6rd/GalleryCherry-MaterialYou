// Generated by view binder compiler. Do not edit!
package me.devsaki.hentoid.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TableLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import me.devsaki.hentoid.R;
import me.devsaki.hentoid.views.CircularProgressView;

public final class DialogPrefsMemoryBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView memoryDb;

  @NonNull
  public final ConstraintLayout memoryDetails;

  @NonNull
  public final ImageView memoryDetailsIcon;

  @NonNull
  public final TableLayout memoryDetailsTable;

  @NonNull
  public final TextView memoryDetailsTxt;

  @NonNull
  public final TextView memoryFree;

  @NonNull
  public final View memoryFreeColor;

  @NonNull
  public final CircularProgressView memoryGlobalGraph;

  @NonNull
  public final View memoryHentoidColorExt;

  @NonNull
  public final View memoryHentoidColorMain;

  @NonNull
  public final TextView memoryHentoidExt;

  @NonNull
  public final TextView memoryHentoidMain;

  @NonNull
  public final TextView memoryTitle;

  @NonNull
  public final TextView memoryTotal;

  private DialogPrefsMemoryBinding(@NonNull ConstraintLayout rootView, @NonNull TextView memoryDb,
      @NonNull ConstraintLayout memoryDetails, @NonNull ImageView memoryDetailsIcon,
      @NonNull TableLayout memoryDetailsTable, @NonNull TextView memoryDetailsTxt,
      @NonNull TextView memoryFree, @NonNull View memoryFreeColor,
      @NonNull CircularProgressView memoryGlobalGraph, @NonNull View memoryHentoidColorExt,
      @NonNull View memoryHentoidColorMain, @NonNull TextView memoryHentoidExt,
      @NonNull TextView memoryHentoidMain, @NonNull TextView memoryTitle,
      @NonNull TextView memoryTotal) {
    this.rootView = rootView;
    this.memoryDb = memoryDb;
    this.memoryDetails = memoryDetails;
    this.memoryDetailsIcon = memoryDetailsIcon;
    this.memoryDetailsTable = memoryDetailsTable;
    this.memoryDetailsTxt = memoryDetailsTxt;
    this.memoryFree = memoryFree;
    this.memoryFreeColor = memoryFreeColor;
    this.memoryGlobalGraph = memoryGlobalGraph;
    this.memoryHentoidColorExt = memoryHentoidColorExt;
    this.memoryHentoidColorMain = memoryHentoidColorMain;
    this.memoryHentoidExt = memoryHentoidExt;
    this.memoryHentoidMain = memoryHentoidMain;
    this.memoryTitle = memoryTitle;
    this.memoryTotal = memoryTotal;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogPrefsMemoryBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogPrefsMemoryBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_prefs_memory, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogPrefsMemoryBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.memory_db;
      TextView memoryDb = ViewBindings.findChildViewById(rootView, id);
      if (memoryDb == null) {
        break missingId;
      }

      id = R.id.memory_details;
      ConstraintLayout memoryDetails = ViewBindings.findChildViewById(rootView, id);
      if (memoryDetails == null) {
        break missingId;
      }

      id = R.id.memory_details_icon;
      ImageView memoryDetailsIcon = ViewBindings.findChildViewById(rootView, id);
      if (memoryDetailsIcon == null) {
        break missingId;
      }

      id = R.id.memory_details_table;
      TableLayout memoryDetailsTable = ViewBindings.findChildViewById(rootView, id);
      if (memoryDetailsTable == null) {
        break missingId;
      }

      id = R.id.memory_details_txt;
      TextView memoryDetailsTxt = ViewBindings.findChildViewById(rootView, id);
      if (memoryDetailsTxt == null) {
        break missingId;
      }

      id = R.id.memory_free;
      TextView memoryFree = ViewBindings.findChildViewById(rootView, id);
      if (memoryFree == null) {
        break missingId;
      }

      id = R.id.memory_free_color;
      View memoryFreeColor = ViewBindings.findChildViewById(rootView, id);
      if (memoryFreeColor == null) {
        break missingId;
      }

      id = R.id.memory_global_graph;
      CircularProgressView memoryGlobalGraph = ViewBindings.findChildViewById(rootView, id);
      if (memoryGlobalGraph == null) {
        break missingId;
      }

      id = R.id.memory_hentoid_color_ext;
      View memoryHentoidColorExt = ViewBindings.findChildViewById(rootView, id);
      if (memoryHentoidColorExt == null) {
        break missingId;
      }

      id = R.id.memory_hentoid_color_main;
      View memoryHentoidColorMain = ViewBindings.findChildViewById(rootView, id);
      if (memoryHentoidColorMain == null) {
        break missingId;
      }

      id = R.id.memory_hentoid_ext;
      TextView memoryHentoidExt = ViewBindings.findChildViewById(rootView, id);
      if (memoryHentoidExt == null) {
        break missingId;
      }

      id = R.id.memory_hentoid_main;
      TextView memoryHentoidMain = ViewBindings.findChildViewById(rootView, id);
      if (memoryHentoidMain == null) {
        break missingId;
      }

      id = R.id.memory_title;
      TextView memoryTitle = ViewBindings.findChildViewById(rootView, id);
      if (memoryTitle == null) {
        break missingId;
      }

      id = R.id.memory_total;
      TextView memoryTotal = ViewBindings.findChildViewById(rootView, id);
      if (memoryTotal == null) {
        break missingId;
      }

      return new DialogPrefsMemoryBinding((ConstraintLayout) rootView, memoryDb, memoryDetails,
          memoryDetailsIcon, memoryDetailsTable, memoryDetailsTxt, memoryFree, memoryFreeColor,
          memoryGlobalGraph, memoryHentoidColorExt, memoryHentoidColorMain, memoryHentoidExt,
          memoryHentoidMain, memoryTitle, memoryTotal);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
