// Generated by view binder compiler. Do not edit!
package me.devsaki.hentoid.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.button.MaterialButtonToggleGroup;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import me.devsaki.hentoid.R;

public final class IncludeLibraryGroupsBottomPanelBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialButton artistDisplayArtists;

  @NonNull
  public final MaterialButton artistDisplayGroups;

  @NonNull
  public final MaterialButtonToggleGroup artistDisplayGrp;

  @NonNull
  public final TextView artistDisplayTxt;

  @NonNull
  public final RecyclerView list;

  @NonNull
  public final TextView title;

  private IncludeLibraryGroupsBottomPanelBinding(@NonNull ConstraintLayout rootView,
      @NonNull MaterialButton artistDisplayArtists, @NonNull MaterialButton artistDisplayGroups,
      @NonNull MaterialButtonToggleGroup artistDisplayGrp, @NonNull TextView artistDisplayTxt,
      @NonNull RecyclerView list, @NonNull TextView title) {
    this.rootView = rootView;
    this.artistDisplayArtists = artistDisplayArtists;
    this.artistDisplayGroups = artistDisplayGroups;
    this.artistDisplayGrp = artistDisplayGrp;
    this.artistDisplayTxt = artistDisplayTxt;
    this.list = list;
    this.title = title;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static IncludeLibraryGroupsBottomPanelBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static IncludeLibraryGroupsBottomPanelBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.include_library_groups_bottom_panel, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static IncludeLibraryGroupsBottomPanelBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.artist_display_artists;
      MaterialButton artistDisplayArtists = ViewBindings.findChildViewById(rootView, id);
      if (artistDisplayArtists == null) {
        break missingId;
      }

      id = R.id.artist_display_groups;
      MaterialButton artistDisplayGroups = ViewBindings.findChildViewById(rootView, id);
      if (artistDisplayGroups == null) {
        break missingId;
      }

      id = R.id.artist_display_grp;
      MaterialButtonToggleGroup artistDisplayGrp = ViewBindings.findChildViewById(rootView, id);
      if (artistDisplayGrp == null) {
        break missingId;
      }

      id = R.id.artist_display_txt;
      TextView artistDisplayTxt = ViewBindings.findChildViewById(rootView, id);
      if (artistDisplayTxt == null) {
        break missingId;
      }

      id = R.id.list;
      RecyclerView list = ViewBindings.findChildViewById(rootView, id);
      if (list == null) {
        break missingId;
      }

      id = R.id.title;
      TextView title = ViewBindings.findChildViewById(rootView, id);
      if (title == null) {
        break missingId;
      }

      return new IncludeLibraryGroupsBottomPanelBinding((ConstraintLayout) rootView,
          artistDisplayArtists, artistDisplayGroups, artistDisplayGrp, artistDisplayTxt, list,
          title);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
