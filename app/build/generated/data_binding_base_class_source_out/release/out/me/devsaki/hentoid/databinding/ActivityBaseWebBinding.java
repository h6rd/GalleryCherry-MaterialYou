// Generated by view binder compiler. Do not edit!
package me.devsaki.hentoid.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.bottomappbar.BottomAppBar;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.progressindicator.CircularProgressIndicator;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import me.devsaki.hentoid.R;

public final class ActivityBaseWebBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final TextView actionBtnBadge;

  @NonNull
  public final FloatingActionButton actionButton;

  @NonNull
  public final ImageView animatedCheck;

  @NonNull
  public final ConstraintLayout bottomAlert;

  @NonNull
  public final ImageView bottomAlertCloseBtn;

  @NonNull
  public final ImageView bottomAlertIcon;

  @NonNull
  public final TextView bottomAlertTxt;

  @NonNull
  public final BottomAppBar bottomNavigation;

  @NonNull
  public final FloatingActionButton languageFilterButton;

  @NonNull
  public final ImageButton menuBack;

  @NonNull
  public final ImageButton menuForward;

  @NonNull
  public final ImageButton menuHome;

  @NonNull
  public final ImageButton menuSeek;

  @NonNull
  public final ProgressBar progressBar;

  @NonNull
  public final CircularProgressIndicator quickDlFeedback;

  @NonNull
  public final SwipeRefreshLayout swipeContainer;

  @NonNull
  public final MaterialToolbar toolbar;

  @NonNull
  public final ConstraintLayout topAlert;

  @NonNull
  public final ImageView topAlertCloseBtn;

  @NonNull
  public final ImageView topAlertIcon;

  @NonNull
  public final TextView topAlertTxt;

  @NonNull
  public final AppBarLayout topBar;

  private ActivityBaseWebBinding(@NonNull CoordinatorLayout rootView,
      @NonNull TextView actionBtnBadge, @NonNull FloatingActionButton actionButton,
      @NonNull ImageView animatedCheck, @NonNull ConstraintLayout bottomAlert,
      @NonNull ImageView bottomAlertCloseBtn, @NonNull ImageView bottomAlertIcon,
      @NonNull TextView bottomAlertTxt, @NonNull BottomAppBar bottomNavigation,
      @NonNull FloatingActionButton languageFilterButton, @NonNull ImageButton menuBack,
      @NonNull ImageButton menuForward, @NonNull ImageButton menuHome,
      @NonNull ImageButton menuSeek, @NonNull ProgressBar progressBar,
      @NonNull CircularProgressIndicator quickDlFeedback,
      @NonNull SwipeRefreshLayout swipeContainer, @NonNull MaterialToolbar toolbar,
      @NonNull ConstraintLayout topAlert, @NonNull ImageView topAlertCloseBtn,
      @NonNull ImageView topAlertIcon, @NonNull TextView topAlertTxt,
      @NonNull AppBarLayout topBar) {
    this.rootView = rootView;
    this.actionBtnBadge = actionBtnBadge;
    this.actionButton = actionButton;
    this.animatedCheck = animatedCheck;
    this.bottomAlert = bottomAlert;
    this.bottomAlertCloseBtn = bottomAlertCloseBtn;
    this.bottomAlertIcon = bottomAlertIcon;
    this.bottomAlertTxt = bottomAlertTxt;
    this.bottomNavigation = bottomNavigation;
    this.languageFilterButton = languageFilterButton;
    this.menuBack = menuBack;
    this.menuForward = menuForward;
    this.menuHome = menuHome;
    this.menuSeek = menuSeek;
    this.progressBar = progressBar;
    this.quickDlFeedback = quickDlFeedback;
    this.swipeContainer = swipeContainer;
    this.toolbar = toolbar;
    this.topAlert = topAlert;
    this.topAlertCloseBtn = topAlertCloseBtn;
    this.topAlertIcon = topAlertIcon;
    this.topAlertTxt = topAlertTxt;
    this.topBar = topBar;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityBaseWebBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityBaseWebBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_base_web, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityBaseWebBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.action_btn_badge;
      TextView actionBtnBadge = ViewBindings.findChildViewById(rootView, id);
      if (actionBtnBadge == null) {
        break missingId;
      }

      id = R.id.action_button;
      FloatingActionButton actionButton = ViewBindings.findChildViewById(rootView, id);
      if (actionButton == null) {
        break missingId;
      }

      id = R.id.animated_check;
      ImageView animatedCheck = ViewBindings.findChildViewById(rootView, id);
      if (animatedCheck == null) {
        break missingId;
      }

      id = R.id.bottom_alert;
      ConstraintLayout bottomAlert = ViewBindings.findChildViewById(rootView, id);
      if (bottomAlert == null) {
        break missingId;
      }

      id = R.id.bottom_alert_close_btn;
      ImageView bottomAlertCloseBtn = ViewBindings.findChildViewById(rootView, id);
      if (bottomAlertCloseBtn == null) {
        break missingId;
      }

      id = R.id.bottom_alert_icon;
      ImageView bottomAlertIcon = ViewBindings.findChildViewById(rootView, id);
      if (bottomAlertIcon == null) {
        break missingId;
      }

      id = R.id.bottom_alert_txt;
      TextView bottomAlertTxt = ViewBindings.findChildViewById(rootView, id);
      if (bottomAlertTxt == null) {
        break missingId;
      }

      id = R.id.bottom_navigation;
      BottomAppBar bottomNavigation = ViewBindings.findChildViewById(rootView, id);
      if (bottomNavigation == null) {
        break missingId;
      }

      id = R.id.language_filter_button;
      FloatingActionButton languageFilterButton = ViewBindings.findChildViewById(rootView, id);
      if (languageFilterButton == null) {
        break missingId;
      }

      id = R.id.menu_back;
      ImageButton menuBack = ViewBindings.findChildViewById(rootView, id);
      if (menuBack == null) {
        break missingId;
      }

      id = R.id.menu_forward;
      ImageButton menuForward = ViewBindings.findChildViewById(rootView, id);
      if (menuForward == null) {
        break missingId;
      }

      id = R.id.menu_home;
      ImageButton menuHome = ViewBindings.findChildViewById(rootView, id);
      if (menuHome == null) {
        break missingId;
      }

      id = R.id.menu_seek;
      ImageButton menuSeek = ViewBindings.findChildViewById(rootView, id);
      if (menuSeek == null) {
        break missingId;
      }

      id = R.id.progress_bar;
      ProgressBar progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.quick_dl_feedback;
      CircularProgressIndicator quickDlFeedback = ViewBindings.findChildViewById(rootView, id);
      if (quickDlFeedback == null) {
        break missingId;
      }

      id = R.id.swipe_container;
      SwipeRefreshLayout swipeContainer = ViewBindings.findChildViewById(rootView, id);
      if (swipeContainer == null) {
        break missingId;
      }

      id = R.id.toolbar;
      MaterialToolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.top_alert;
      ConstraintLayout topAlert = ViewBindings.findChildViewById(rootView, id);
      if (topAlert == null) {
        break missingId;
      }

      id = R.id.top_alert_close_btn;
      ImageView topAlertCloseBtn = ViewBindings.findChildViewById(rootView, id);
      if (topAlertCloseBtn == null) {
        break missingId;
      }

      id = R.id.top_alert_icon;
      ImageView topAlertIcon = ViewBindings.findChildViewById(rootView, id);
      if (topAlertIcon == null) {
        break missingId;
      }

      id = R.id.top_alert_txt;
      TextView topAlertTxt = ViewBindings.findChildViewById(rootView, id);
      if (topAlertTxt == null) {
        break missingId;
      }

      id = R.id.top_bar;
      AppBarLayout topBar = ViewBindings.findChildViewById(rootView, id);
      if (topBar == null) {
        break missingId;
      }

      return new ActivityBaseWebBinding((CoordinatorLayout) rootView, actionBtnBadge, actionButton,
          animatedCheck, bottomAlert, bottomAlertCloseBtn, bottomAlertIcon, bottomAlertTxt,
          bottomNavigation, languageFilterButton, menuBack, menuForward, menuHome, menuSeek,
          progressBar, quickDlFeedback, swipeContainer, toolbar, topAlert, topAlertCloseBtn,
          topAlertIcon, topAlertTxt, topBar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
