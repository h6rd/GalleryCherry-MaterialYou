// Generated by view binder compiler. Do not edit!
package me.devsaki.hentoid.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.divider.MaterialDivider;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import me.devsaki.hentoid.R;
import me.devsaki.hentoid.views.ListPickerView;

public final class ActivitySearchBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final CheckBox excludeCheckbox;

  @NonNull
  public final Guideline guidelineMiddle;

  @NonNull
  public final MaterialDivider horzDivider;

  @NonNull
  public final ListPickerView locationPicker;

  @NonNull
  public final TextView searchFab;

  @NonNull
  public final RecyclerView searchTags;

  @NonNull
  public final TextView startCaption;

  @NonNull
  public final TextView textCategoryAny;

  @NonNull
  public final TextView textCategoryModel;

  @NonNull
  public final TextView textCategorySource;

  @NonNull
  public final TextView textCategoryTag;

  @NonNull
  public final Toolbar toolbar;

  @NonNull
  public final ListPickerView typePicker;

  private ActivitySearchBinding(@NonNull ConstraintLayout rootView,
      @NonNull CheckBox excludeCheckbox, @NonNull Guideline guidelineMiddle,
      @NonNull MaterialDivider horzDivider, @NonNull ListPickerView locationPicker,
      @NonNull TextView searchFab, @NonNull RecyclerView searchTags, @NonNull TextView startCaption,
      @NonNull TextView textCategoryAny, @NonNull TextView textCategoryModel,
      @NonNull TextView textCategorySource, @NonNull TextView textCategoryTag,
      @NonNull Toolbar toolbar, @NonNull ListPickerView typePicker) {
    this.rootView = rootView;
    this.excludeCheckbox = excludeCheckbox;
    this.guidelineMiddle = guidelineMiddle;
    this.horzDivider = horzDivider;
    this.locationPicker = locationPicker;
    this.searchFab = searchFab;
    this.searchTags = searchTags;
    this.startCaption = startCaption;
    this.textCategoryAny = textCategoryAny;
    this.textCategoryModel = textCategoryModel;
    this.textCategorySource = textCategorySource;
    this.textCategoryTag = textCategoryTag;
    this.toolbar = toolbar;
    this.typePicker = typePicker;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivitySearchBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivitySearchBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_search, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivitySearchBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.excludeCheckbox;
      CheckBox excludeCheckbox = ViewBindings.findChildViewById(rootView, id);
      if (excludeCheckbox == null) {
        break missingId;
      }

      id = R.id.guideline_middle;
      Guideline guidelineMiddle = ViewBindings.findChildViewById(rootView, id);
      if (guidelineMiddle == null) {
        break missingId;
      }

      id = R.id.horz_divider;
      MaterialDivider horzDivider = ViewBindings.findChildViewById(rootView, id);
      if (horzDivider == null) {
        break missingId;
      }

      id = R.id.location_picker;
      ListPickerView locationPicker = ViewBindings.findChildViewById(rootView, id);
      if (locationPicker == null) {
        break missingId;
      }

      id = R.id.search_fab;
      TextView searchFab = ViewBindings.findChildViewById(rootView, id);
      if (searchFab == null) {
        break missingId;
      }

      id = R.id.search_tags;
      RecyclerView searchTags = ViewBindings.findChildViewById(rootView, id);
      if (searchTags == null) {
        break missingId;
      }

      id = R.id.startCaption;
      TextView startCaption = ViewBindings.findChildViewById(rootView, id);
      if (startCaption == null) {
        break missingId;
      }

      id = R.id.textCategoryAny;
      TextView textCategoryAny = ViewBindings.findChildViewById(rootView, id);
      if (textCategoryAny == null) {
        break missingId;
      }

      id = R.id.textCategoryModel;
      TextView textCategoryModel = ViewBindings.findChildViewById(rootView, id);
      if (textCategoryModel == null) {
        break missingId;
      }

      id = R.id.textCategorySource;
      TextView textCategorySource = ViewBindings.findChildViewById(rootView, id);
      if (textCategorySource == null) {
        break missingId;
      }

      id = R.id.textCategoryTag;
      TextView textCategoryTag = ViewBindings.findChildViewById(rootView, id);
      if (textCategoryTag == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.type_picker;
      ListPickerView typePicker = ViewBindings.findChildViewById(rootView, id);
      if (typePicker == null) {
        break missingId;
      }

      return new ActivitySearchBinding((ConstraintLayout) rootView, excludeCheckbox,
          guidelineMiddle, horzDivider, locationPicker, searchFab, searchTags, startCaption,
          textCategoryAny, textCategoryModel, textCategorySource, textCategoryTag, toolbar,
          typePicker);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
