// Generated by view binder compiler. Do not edit!
package me.devsaki.hentoid.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import me.devsaki.hentoid.R;

public final class FragmentLandingHistoryBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final EditText landingHistoryInput;

  @NonNull
  public final RecyclerView landingHistoryList;

  @NonNull
  public final TextView landingHistoryOk;

  @NonNull
  public final TextView landingHistoryTitle;

  private FragmentLandingHistoryBinding(@NonNull ConstraintLayout rootView,
      @NonNull EditText landingHistoryInput, @NonNull RecyclerView landingHistoryList,
      @NonNull TextView landingHistoryOk, @NonNull TextView landingHistoryTitle) {
    this.rootView = rootView;
    this.landingHistoryInput = landingHistoryInput;
    this.landingHistoryList = landingHistoryList;
    this.landingHistoryOk = landingHistoryOk;
    this.landingHistoryTitle = landingHistoryTitle;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentLandingHistoryBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentLandingHistoryBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_landing_history, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentLandingHistoryBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.landing_history_input;
      EditText landingHistoryInput = ViewBindings.findChildViewById(rootView, id);
      if (landingHistoryInput == null) {
        break missingId;
      }

      id = R.id.landing_history_list;
      RecyclerView landingHistoryList = ViewBindings.findChildViewById(rootView, id);
      if (landingHistoryList == null) {
        break missingId;
      }

      id = R.id.landing_history_ok;
      TextView landingHistoryOk = ViewBindings.findChildViewById(rootView, id);
      if (landingHistoryOk == null) {
        break missingId;
      }

      id = R.id.landing_history_title;
      TextView landingHistoryTitle = ViewBindings.findChildViewById(rootView, id);
      if (landingHistoryTitle == null) {
        break missingId;
      }

      return new FragmentLandingHistoryBinding((ConstraintLayout) rootView, landingHistoryInput,
          landingHistoryList, landingHistoryOk, landingHistoryTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
