// Generated by view binder compiler. Do not edit!
package me.devsaki.hentoid.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.materialswitch.MaterialSwitch;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import me.devsaki.hentoid.R;
import me.devsaki.hentoid.views.ListPickerView;

public final class DialogLibraryTransformBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final MaterialButton actionButton;

  @NonNull
  public final ConstraintLayout container;

  @NonNull
  public final ListPickerView encoderAll;

  @NonNull
  public final ListPickerView encoderLossless;

  @NonNull
  public final ListPickerView encoderLossy;

  @NonNull
  public final TextInputLayout encoderQuality;

  @NonNull
  public final TextView encoderWarning;

  @NonNull
  public final ImageView encoderWarningIcon;

  @NonNull
  public final ImageButton nextPageBtn;

  @NonNull
  public final ImageButton prevPageBtn;

  @NonNull
  public final TextView previewDims;

  @NonNull
  public final TextView previewHeader;

  @NonNull
  public final TextView previewName;

  @NonNull
  public final ProgressBar previewProgress;

  @NonNull
  public final TextView previewSize;

  @NonNull
  public final TextView resizeHeader;

  @NonNull
  public final ListPickerView resizeMethod;

  @NonNull
  public final TextInputLayout resizeMethod1Ratio;

  @NonNull
  public final TextInputLayout resizeMethod2MaxHeight;

  @NonNull
  public final TextInputLayout resizeMethod2MaxWidth;

  @NonNull
  public final TextInputLayout resizeMethod3Ratio;

  @NonNull
  public final MaterialSwitch resizeSwitch;

  @NonNull
  public final ImageView thumb;

  @NonNull
  public final TextView transcodeHeader;

  @NonNull
  public final ListPickerView transcodeMethod;

  private DialogLibraryTransformBinding(@NonNull ScrollView rootView,
      @NonNull MaterialButton actionButton, @NonNull ConstraintLayout container,
      @NonNull ListPickerView encoderAll, @NonNull ListPickerView encoderLossless,
      @NonNull ListPickerView encoderLossy, @NonNull TextInputLayout encoderQuality,
      @NonNull TextView encoderWarning, @NonNull ImageView encoderWarningIcon,
      @NonNull ImageButton nextPageBtn, @NonNull ImageButton prevPageBtn,
      @NonNull TextView previewDims, @NonNull TextView previewHeader, @NonNull TextView previewName,
      @NonNull ProgressBar previewProgress, @NonNull TextView previewSize,
      @NonNull TextView resizeHeader, @NonNull ListPickerView resizeMethod,
      @NonNull TextInputLayout resizeMethod1Ratio, @NonNull TextInputLayout resizeMethod2MaxHeight,
      @NonNull TextInputLayout resizeMethod2MaxWidth, @NonNull TextInputLayout resizeMethod3Ratio,
      @NonNull MaterialSwitch resizeSwitch, @NonNull ImageView thumb,
      @NonNull TextView transcodeHeader, @NonNull ListPickerView transcodeMethod) {
    this.rootView = rootView;
    this.actionButton = actionButton;
    this.container = container;
    this.encoderAll = encoderAll;
    this.encoderLossless = encoderLossless;
    this.encoderLossy = encoderLossy;
    this.encoderQuality = encoderQuality;
    this.encoderWarning = encoderWarning;
    this.encoderWarningIcon = encoderWarningIcon;
    this.nextPageBtn = nextPageBtn;
    this.prevPageBtn = prevPageBtn;
    this.previewDims = previewDims;
    this.previewHeader = previewHeader;
    this.previewName = previewName;
    this.previewProgress = previewProgress;
    this.previewSize = previewSize;
    this.resizeHeader = resizeHeader;
    this.resizeMethod = resizeMethod;
    this.resizeMethod1Ratio = resizeMethod1Ratio;
    this.resizeMethod2MaxHeight = resizeMethod2MaxHeight;
    this.resizeMethod2MaxWidth = resizeMethod2MaxWidth;
    this.resizeMethod3Ratio = resizeMethod3Ratio;
    this.resizeSwitch = resizeSwitch;
    this.thumb = thumb;
    this.transcodeHeader = transcodeHeader;
    this.transcodeMethod = transcodeMethod;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogLibraryTransformBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogLibraryTransformBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_library_transform, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogLibraryTransformBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.action_button;
      MaterialButton actionButton = ViewBindings.findChildViewById(rootView, id);
      if (actionButton == null) {
        break missingId;
      }

      id = R.id.container;
      ConstraintLayout container = ViewBindings.findChildViewById(rootView, id);
      if (container == null) {
        break missingId;
      }

      id = R.id.encoder_all;
      ListPickerView encoderAll = ViewBindings.findChildViewById(rootView, id);
      if (encoderAll == null) {
        break missingId;
      }

      id = R.id.encoder_lossless;
      ListPickerView encoderLossless = ViewBindings.findChildViewById(rootView, id);
      if (encoderLossless == null) {
        break missingId;
      }

      id = R.id.encoder_lossy;
      ListPickerView encoderLossy = ViewBindings.findChildViewById(rootView, id);
      if (encoderLossy == null) {
        break missingId;
      }

      id = R.id.encoder_quality;
      TextInputLayout encoderQuality = ViewBindings.findChildViewById(rootView, id);
      if (encoderQuality == null) {
        break missingId;
      }

      id = R.id.encoder_warning;
      TextView encoderWarning = ViewBindings.findChildViewById(rootView, id);
      if (encoderWarning == null) {
        break missingId;
      }

      id = R.id.encoder_warning_icon;
      ImageView encoderWarningIcon = ViewBindings.findChildViewById(rootView, id);
      if (encoderWarningIcon == null) {
        break missingId;
      }

      id = R.id.next_page_btn;
      ImageButton nextPageBtn = ViewBindings.findChildViewById(rootView, id);
      if (nextPageBtn == null) {
        break missingId;
      }

      id = R.id.prev_page_btn;
      ImageButton prevPageBtn = ViewBindings.findChildViewById(rootView, id);
      if (prevPageBtn == null) {
        break missingId;
      }

      id = R.id.preview_dims;
      TextView previewDims = ViewBindings.findChildViewById(rootView, id);
      if (previewDims == null) {
        break missingId;
      }

      id = R.id.preview_header;
      TextView previewHeader = ViewBindings.findChildViewById(rootView, id);
      if (previewHeader == null) {
        break missingId;
      }

      id = R.id.preview_name;
      TextView previewName = ViewBindings.findChildViewById(rootView, id);
      if (previewName == null) {
        break missingId;
      }

      id = R.id.preview_progress;
      ProgressBar previewProgress = ViewBindings.findChildViewById(rootView, id);
      if (previewProgress == null) {
        break missingId;
      }

      id = R.id.preview_size;
      TextView previewSize = ViewBindings.findChildViewById(rootView, id);
      if (previewSize == null) {
        break missingId;
      }

      id = R.id.resize_header;
      TextView resizeHeader = ViewBindings.findChildViewById(rootView, id);
      if (resizeHeader == null) {
        break missingId;
      }

      id = R.id.resize_method;
      ListPickerView resizeMethod = ViewBindings.findChildViewById(rootView, id);
      if (resizeMethod == null) {
        break missingId;
      }

      id = R.id.resize_method_1_ratio;
      TextInputLayout resizeMethod1Ratio = ViewBindings.findChildViewById(rootView, id);
      if (resizeMethod1Ratio == null) {
        break missingId;
      }

      id = R.id.resize_method_2_max_height;
      TextInputLayout resizeMethod2MaxHeight = ViewBindings.findChildViewById(rootView, id);
      if (resizeMethod2MaxHeight == null) {
        break missingId;
      }

      id = R.id.resize_method_2_max_width;
      TextInputLayout resizeMethod2MaxWidth = ViewBindings.findChildViewById(rootView, id);
      if (resizeMethod2MaxWidth == null) {
        break missingId;
      }

      id = R.id.resize_method_3_ratio;
      TextInputLayout resizeMethod3Ratio = ViewBindings.findChildViewById(rootView, id);
      if (resizeMethod3Ratio == null) {
        break missingId;
      }

      id = R.id.resize_switch;
      MaterialSwitch resizeSwitch = ViewBindings.findChildViewById(rootView, id);
      if (resizeSwitch == null) {
        break missingId;
      }

      id = R.id.thumb;
      ImageView thumb = ViewBindings.findChildViewById(rootView, id);
      if (thumb == null) {
        break missingId;
      }

      id = R.id.transcode_header;
      TextView transcodeHeader = ViewBindings.findChildViewById(rootView, id);
      if (transcodeHeader == null) {
        break missingId;
      }

      id = R.id.transcode_method;
      ListPickerView transcodeMethod = ViewBindings.findChildViewById(rootView, id);
      if (transcodeMethod == null) {
        break missingId;
      }

      return new DialogLibraryTransformBinding((ScrollView) rootView, actionButton, container,
          encoderAll, encoderLossless, encoderLossy, encoderQuality, encoderWarning,
          encoderWarningIcon, nextPageBtn, prevPageBtn, previewDims, previewHeader, previewName,
          previewProgress, previewSize, resizeHeader, resizeMethod, resizeMethod1Ratio,
          resizeMethod2MaxHeight, resizeMethod2MaxWidth, resizeMethod3Ratio, resizeSwitch, thumb,
          transcodeHeader, transcodeMethod);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
