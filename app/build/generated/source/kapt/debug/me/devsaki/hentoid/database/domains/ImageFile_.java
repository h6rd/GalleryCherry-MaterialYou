
package me.devsaki.hentoid.database.domains;

import io.objectbox.EntityInfo;
import io.objectbox.annotation.apihint.Internal;
import io.objectbox.internal.CursorFactory;
import io.objectbox.internal.IdGetter;
import io.objectbox.internal.ToOneGetter;
import io.objectbox.relation.RelationInfo;
import io.objectbox.relation.ToOne;
import me.devsaki.hentoid.database.domains.ImageFileCursor.Factory;
import me.devsaki.hentoid.enums.StatusContent;
import me.devsaki.hentoid.enums.StatusContent.StatusContentConverter;

// THIS CODE IS GENERATED BY ObjectBox, DO NOT EDIT.

/**
 * Properties for entity "ImageFile". Can be used for QueryBuilder and for referencing DB names.
 */
public final class ImageFile_ implements EntityInfo<ImageFile> {

    // Leading underscores for static constants to avoid naming conflicts with property names

    public static final String __ENTITY_NAME = "ImageFile";

    public static final int __ENTITY_ID = 3;

    public static final Class<ImageFile> __ENTITY_CLASS = ImageFile.class;

    public static final String __DB_NAME = "ImageFile";

    public static final CursorFactory<ImageFile> __CURSOR_FACTORY = new Factory();

    @Internal
    static final ImageFileIdGetter __ID_GETTER = new ImageFileIdGetter();

    public final static ImageFile_ __INSTANCE = new ImageFile_();

    public final static io.objectbox.Property<ImageFile> id =
        new io.objectbox.Property<>(__INSTANCE, 0, 1, long.class, "id", true, "id");

    public final static io.objectbox.Property<ImageFile> order =
        new io.objectbox.Property<>(__INSTANCE, 1, 2, Integer.class, "order");

    public final static io.objectbox.Property<ImageFile> url =
        new io.objectbox.Property<>(__INSTANCE, 2, 3, String.class, "url");

    public final static io.objectbox.Property<ImageFile> pageUrl =
        new io.objectbox.Property<>(__INSTANCE, 3, 16, String.class, "pageUrl");

    public final static io.objectbox.Property<ImageFile> name =
        new io.objectbox.Property<>(__INSTANCE, 4, 4, String.class, "name");

    public final static io.objectbox.Property<ImageFile> fileUri =
        new io.objectbox.Property<>(__INSTANCE, 5, 11, String.class, "fileUri");

    public final static io.objectbox.Property<ImageFile> read =
        new io.objectbox.Property<>(__INSTANCE, 6, 14, boolean.class, "read");

    public final static io.objectbox.Property<ImageFile> favourite =
        new io.objectbox.Property<>(__INSTANCE, 7, 9, boolean.class, "favourite");

    public final static io.objectbox.Property<ImageFile> isCover =
        new io.objectbox.Property<>(__INSTANCE, 8, 12, boolean.class, "isCover");

    public final static io.objectbox.Property<ImageFile> status =
        new io.objectbox.Property<>(__INSTANCE, 9, 5, int.class, "status", false, "status", StatusContentConverter.class, StatusContent.class);

    public final static io.objectbox.Property<ImageFile> mimeType =
        new io.objectbox.Property<>(__INSTANCE, 10, 10, String.class, "mimeType");

    public final static io.objectbox.Property<ImageFile> size =
        new io.objectbox.Property<>(__INSTANCE, 11, 13, long.class, "size");

    public final static io.objectbox.Property<ImageFile> imageHash =
        new io.objectbox.Property<>(__INSTANCE, 12, 15, long.class, "imageHash");

    public final static io.objectbox.Property<ImageFile> downloadParams =
        new io.objectbox.Property<>(__INSTANCE, 13, 7, String.class, "downloadParams");

    public final static io.objectbox.Property<ImageFile> contentId =
        new io.objectbox.Property<>(__INSTANCE, 14, 6, long.class, "contentId", true);

    public final static io.objectbox.Property<ImageFile> chapterId =
        new io.objectbox.Property<>(__INSTANCE, 15, 17, long.class, "chapterId", true);

    @SuppressWarnings("unchecked")
    public final static io.objectbox.Property<ImageFile>[] __ALL_PROPERTIES = new io.objectbox.Property[]{
        id,
        order,
        url,
        pageUrl,
        name,
        fileUri,
        read,
        favourite,
        isCover,
        status,
        mimeType,
        size,
        imageHash,
        downloadParams,
        contentId,
        chapterId
    };

    public final static io.objectbox.Property<ImageFile> __ID_PROPERTY = id;

    @Override
    public String getEntityName() {
        return __ENTITY_NAME;
    }

    @Override
    public int getEntityId() {
        return __ENTITY_ID;
    }

    @Override
    public Class<ImageFile> getEntityClass() {
        return __ENTITY_CLASS;
    }

    @Override
    public String getDbName() {
        return __DB_NAME;
    }

    @Override
    public io.objectbox.Property<ImageFile>[] getAllProperties() {
        return __ALL_PROPERTIES;
    }

    @Override
    public io.objectbox.Property<ImageFile> getIdProperty() {
        return __ID_PROPERTY;
    }

    @Override
    public IdGetter<ImageFile> getIdGetter() {
        return __ID_GETTER;
    }

    @Override
    public CursorFactory<ImageFile> getCursorFactory() {
        return __CURSOR_FACTORY;
    }

    @Internal
    static final class ImageFileIdGetter implements IdGetter<ImageFile> {
        @Override
        public long getId(ImageFile object) {
            return object.getId();
        }
    }

    /** To-one relation "content" to target entity "Content". */
    public static final RelationInfo<ImageFile, Content> content =
            new RelationInfo<>(ImageFile_.__INSTANCE, Content_.__INSTANCE, contentId, new ToOneGetter<ImageFile, Content>() {
                @Override
                public ToOne<Content> getToOne(ImageFile entity) {
                    return entity.getContent();
                }
            });

    /** To-one relation "chapter" to target entity "Chapter". */
    public static final RelationInfo<ImageFile, Chapter> chapter =
            new RelationInfo<>(ImageFile_.__INSTANCE, Chapter_.__INSTANCE, chapterId, new ToOneGetter<ImageFile, Chapter>() {
                @Override
                public ToOne<Chapter> getToOne(ImageFile entity) {
                    return entity.getChapter();
                }
            });

}
