package me.devsaki.hentoid.database.domains;

import io.objectbox.BoxStore;
import io.objectbox.Cursor;
import io.objectbox.annotation.apihint.Internal;
import io.objectbox.internal.CursorFactory;
import io.objectbox.relation.ToMany;
import io.objectbox.relation.ToOne;
import java.util.List;
import java.util.Map;
import me.devsaki.hentoid.database.domains.Content.StringMapConverter;
import me.devsaki.hentoid.enums.Site;
import me.devsaki.hentoid.enums.Site.SiteConverter;
import me.devsaki.hentoid.enums.StatusContent;
import me.devsaki.hentoid.enums.StatusContent.StatusContentConverter;

// THIS CODE IS GENERATED BY ObjectBox, DO NOT EDIT.

/**
 * ObjectBox generated Cursor implementation for "Content".
 * Note that this is a low-level class: usually you should stick to the Box class.
 */
public final class ContentCursor extends Cursor<Content> {
    @Internal
    static final class Factory implements CursorFactory<Content> {
        @Override
        public Cursor<Content> createCursor(io.objectbox.Transaction tx, long cursorHandle, BoxStore boxStoreForEntities) {
            return new ContentCursor(tx, cursorHandle, boxStoreForEntities);
        }
    }

    private static final Content_.ContentIdGetter ID_GETTER = Content_.__ID_GETTER;

    private final StatusContentConverter statusConverter = new StatusContentConverter();
    private final SiteConverter siteConverter = new SiteConverter();
    private final StringMapConverter bookPreferencesConverter = new StringMapConverter();

    private final static int __ID_url = Content_.url.id;
    private final static int __ID_uniqueSiteId = Content_.uniqueSiteId.id;
    private final static int __ID_title = Content_.title.id;
    private final static int __ID_author = Content_.author.id;
    private final static int __ID_coverImageUrl = Content_.coverImageUrl.id;
    private final static int __ID_qtyPages = Content_.qtyPages.id;
    private final static int __ID_uploadDate = Content_.uploadDate.id;
    private final static int __ID_downloadDate = Content_.downloadDate.id;
    private final static int __ID_downloadCompletionDate = Content_.downloadCompletionDate.id;
    private final static int __ID_status = Content_.status.id;
    private final static int __ID_site = Content_.site.id;
    private final static int __ID_storageUri = Content_.storageUri.id;
    private final static int __ID_favourite = Content_.favourite.id;
    private final static int __ID_rating = Content_.rating.id;
    private final static int __ID_completed = Content_.completed.id;
    private final static int __ID_reads = Content_.reads.id;
    private final static int __ID_lastReadDate = Content_.lastReadDate.id;
    private final static int __ID_lastReadPageIndex = Content_.lastReadPageIndex.id;
    private final static int __ID_manuallyMerged = Content_.manuallyMerged.id;
    private final static int __ID_bookPreferences = Content_.bookPreferences.id;
    private final static int __ID_downloadMode = Content_.downloadMode.id;
    private final static int __ID_replacementTitle = Content_.replacementTitle.id;
    private final static int __ID_size = Content_.size.id;
    private final static int __ID_readProgress = Content_.readProgress.id;
    private final static int __ID_downloadParams = Content_.downloadParams.id;
    private final static int __ID_isBeingProcessed = Content_.isBeingProcessed.id;
    private final static int __ID_jsonUri = Content_.jsonUri.id;
    private final static int __ID_isFlaggedForDeletion = Content_.isFlaggedForDeletion.id;
    private final static int __ID_lastEditDate = Content_.lastEditDate.id;
    private final static int __ID_contentToReplaceId = Content_.contentToReplaceId.id;

    public ContentCursor(io.objectbox.Transaction tx, long cursor, BoxStore boxStore) {
        super(tx, cursor, Content_.__INSTANCE, boxStore);
    }

    @Override
    public long getId(Content entity) {
        return ID_GETTER.getId(entity);
    }

    /**
     * Puts an object into its box.
     *
     * @return The ID of the object within its box.
     */
    @SuppressWarnings({"rawtypes", "unchecked"}) 
    @Override
    public long put(Content entity) {
        ToOne<Content> contentToReplace = entity.getContentToReplace();
        if(contentToReplace != null && contentToReplace.internalRequiresPutTarget()) {
            Cursor<Content> targetCursor = getRelationTargetCursor(Content.class);
            try {
                contentToReplace.internalPutTarget(targetCursor);
            } finally {
                targetCursor.close();
            }
        }
        String url = entity.getUrl();
        int __id1 = url != null ? __ID_url : 0;
        String uniqueSiteId = entity.getUniqueSiteId();
        int __id2 = uniqueSiteId != null ? __ID_uniqueSiteId : 0;
        String title = entity.getTitle();
        int __id3 = title != null ? __ID_title : 0;
        String author = entity.getAuthor();
        int __id4 = author != null ? __ID_author : 0;

        collect400000(cursor, 0, PUT_FLAG_FIRST,
                __id1, url, __id2, uniqueSiteId,
                __id3, title, __id4, author);

        String coverImageUrl = entity.getCoverImageUrl();
        int __id5 = coverImageUrl != null ? __ID_coverImageUrl : 0;
        String storageUri = entity.getStorageUri();
        int __id12 = storageUri != null ? __ID_storageUri : 0;
        Map bookPreferences = entity.getBookPreferences();
        int __id20 = bookPreferences != null ? __ID_bookPreferences : 0;
        String replacementTitle = entity.getReplacementTitle();
        int __id22 = replacementTitle != null ? __ID_replacementTitle : 0;

        collect400000(cursor, 0, 0,
                __id5, coverImageUrl, __id12, storageUri,
                __id20, __id20 != 0 ? bookPreferencesConverter.convertToDatabaseValue(bookPreferences) : null, __id22, replacementTitle);

        String downloadParams = entity.getDownloadParams();
        int __id25 = downloadParams != null ? __ID_downloadParams : 0;
        String jsonUri = entity.getJsonUri();
        int __id27 = jsonUri != null ? __ID_jsonUri : 0;
        Integer qtyPages = entity.getQtyPages();
        int __id6 = qtyPages != null ? __ID_qtyPages : 0;
        StatusContent status = entity.getStatus();
        int __id10 = status != null ? __ID_status : 0;

        collect313311(cursor, 0, 0,
                __id25, downloadParams, __id27, jsonUri,
                0, null, 0, null,
                __ID_uploadDate, entity.getUploadDate(), __ID_downloadDate, entity.getDownloadDate(),
                __ID_downloadCompletionDate, entity.getDownloadCompletionDate(), __id6, __id6 != 0 ? qtyPages : 0,
                __id10, __id10 != 0 ? statusConverter.convertToDatabaseValue(status) : 0, __ID_rating, entity.getRating(),
                __ID_readProgress, entity.getReadProgress(), 0, 0);

        Site site = entity.getSite();
        int __id11 = site != null ? __ID_site : 0;

        collect313311(cursor, 0, 0,
                0, null, 0, null,
                0, null, 0, null,
                __id11, __id11 != 0 ? siteConverter.convertToDatabaseValue(site) : 0, __ID_reads, entity.getReads(),
                __ID_lastReadDate, entity.getLastReadDate(), __ID_lastReadPageIndex, entity.getLastReadPageIndex(),
                __ID_downloadMode, entity.getDownloadMode(), __ID_favourite, entity.isFavourite() ? 1 : 0,
                0, 0, 0, 0);

        collect313311(cursor, 0, 0,
                0, null, 0, null,
                0, null, 0, null,
                __ID_size, entity.getSize(), __ID_lastEditDate, entity.getLastEditDate(),
                __ID_contentToReplaceId, entity.getContentToReplace().getTargetId(), __ID_completed, entity.isCompleted() ? 1 : 0,
                __ID_manuallyMerged, entity.isManuallyMerged() ? 1 : 0, __ID_isBeingProcessed, entity.isBeingProcessed() ? 1 : 0,
                0, 0, 0, 0);

        long __assignedId = collect004000(cursor, entity.getId(), PUT_FLAG_COMPLETE,
                __ID_isFlaggedForDeletion, entity.isFlaggedForDeletion() ? 1 : 0, 0, 0,
                0, 0, 0, 0);

        entity.setId(__assignedId);

        attachEntity(entity);
        checkApplyToManyToDb(entity.getAttributes(), Attribute.class);
        checkApplyToManyToDb(entity.getImageFiles(), ImageFile.class);
        checkApplyToManyToDb(entity.groupItems, GroupItem.class);
        checkApplyToManyToDb(entity.getChapters(), Chapter.class);
        checkApplyToManyToDb(entity.getQueueRecords(), QueueRecord.class);
        checkApplyToManyToDb(entity.getErrorLog(), ErrorRecord.class);
        return __assignedId;
    }

    private void attachEntity(Content entity) {
        // Transformer will create __boxStore field in entity and init it here:
        // entity.__boxStore = boxStoreForEntities;
    }

}
