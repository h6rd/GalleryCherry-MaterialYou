package me.devsaki.hentoid.database.domains;

import io.objectbox.BoxStore;
import io.objectbox.Cursor;
import io.objectbox.annotation.apihint.Internal;
import io.objectbox.internal.CursorFactory;
import io.objectbox.relation.ToMany;
import io.objectbox.relation.ToOne;
import java.util.List;
import me.devsaki.hentoid.database.domains.Group.GroupingConverter;
import me.devsaki.hentoid.enums.Grouping;

// THIS CODE IS GENERATED BY ObjectBox, DO NOT EDIT.

/**
 * ObjectBox generated Cursor implementation for "Group".
 * Note that this is a low-level class: usually you should stick to the Box class.
 */
public final class GroupCursor extends Cursor<Group> {
    @Internal
    static final class Factory implements CursorFactory<Group> {
        @Override
        public Cursor<Group> createCursor(io.objectbox.Transaction tx, long cursorHandle, BoxStore boxStoreForEntities) {
            return new GroupCursor(tx, cursorHandle, boxStoreForEntities);
        }
    }

    private static final Group_.GroupIdGetter ID_GETTER = Group_.__ID_GETTER;

    private final GroupingConverter groupingConverter = new GroupingConverter();

    private final static int __ID_grouping = Group_.grouping.id;
    private final static int __ID_name = Group_.name.id;
    private final static int __ID_subtype = Group_.subtype.id;
    private final static int __ID_order = Group_.order.id;
    private final static int __ID_hasCustomBookOrder = Group_.hasCustomBookOrder.id;
    private final static int __ID_propertyMin = Group_.propertyMin.id;
    private final static int __ID_propertyMax = Group_.propertyMax.id;
    private final static int __ID_searchUri = Group_.searchUri.id;
    private final static int __ID_favourite = Group_.favourite.id;
    private final static int __ID_rating = Group_.rating.id;
    private final static int __ID_isBeingProcessed = Group_.isBeingProcessed.id;
    private final static int __ID_isFlaggedForDeletion = Group_.isFlaggedForDeletion.id;
    private final static int __ID_coverContentId = Group_.coverContentId.id;

    public GroupCursor(io.objectbox.Transaction tx, long cursor, BoxStore boxStore) {
        super(tx, cursor, Group_.__INSTANCE, boxStore);
    }

    @Override
    public long getId(Group entity) {
        return ID_GETTER.getId(entity);
    }

    /**
     * Puts an object into its box.
     *
     * @return The ID of the object within its box.
     */
    @SuppressWarnings({"rawtypes", "unchecked"}) 
    @Override
    public long put(Group entity) {
        ToOne<Content> coverContent = entity.coverContent;
        if(coverContent != null && coverContent.internalRequiresPutTarget()) {
            Cursor<Content> targetCursor = getRelationTargetCursor(Content.class);
            try {
                coverContent.internalPutTarget(targetCursor);
            } finally {
                targetCursor.close();
            }
        }
        String name = entity.name;
        int __id2 = name != null ? __ID_name : 0;
        String searchUri = entity.searchUri;
        int __id8 = searchUri != null ? __ID_searchUri : 0;
        Grouping grouping = entity.grouping;
        int __id1 = grouping != null ? __ID_grouping : 0;

        collect313311(cursor, 0, PUT_FLAG_FIRST,
                __id2, name, __id8, searchUri,
                0, null, 0, null,
                __ID_coverContentId, entity.coverContent.getTargetId(), __id1, __id1 != 0 ? groupingConverter.convertToDatabaseValue(grouping) : 0,
                __ID_subtype, entity.subtype, __ID_order, entity.order,
                __ID_propertyMin, entity.propertyMin, __ID_propertyMax, entity.propertyMax,
                0, 0, 0, 0);

        long __assignedId = collect313311(cursor, entity.id, PUT_FLAG_COMPLETE,
                0, null, 0, null,
                0, null, 0, null,
                __ID_rating, entity.getRating(), __ID_hasCustomBookOrder, entity.hasCustomBookOrder ? 1 : 0,
                __ID_favourite, entity.isFavourite() ? 1 : 0, __ID_isBeingProcessed, entity.isBeingProcessed() ? 1 : 0,
                __ID_isFlaggedForDeletion, entity.isFlaggedForDeletion() ? 1 : 0, 0, 0,
                0, 0, 0, 0);

        entity.id = __assignedId;

        attachEntity(entity);
        checkApplyToManyToDb(entity.items, GroupItem.class);
        return __assignedId;
    }

    private void attachEntity(Group entity) {
        // Transformer will create __boxStore field in entity and init it here:
        // entity.__boxStore = boxStoreForEntities;
    }

}
