
package me.devsaki.hentoid.database.domains;

import io.objectbox.EntityInfo;
import io.objectbox.annotation.apihint.Internal;
import io.objectbox.internal.CursorFactory;
import io.objectbox.internal.IdGetter;
import io.objectbox.internal.ToOneGetter;
import io.objectbox.relation.RelationInfo;
import io.objectbox.relation.ToOne;
import me.devsaki.hentoid.database.domains.GroupItemCursor.Factory;

// THIS CODE IS GENERATED BY ObjectBox, DO NOT EDIT.

/**
 * Properties for entity "GroupItem". Can be used for QueryBuilder and for referencing DB names.
 */
public final class GroupItem_ implements EntityInfo<GroupItem> {

    // Leading underscores for static constants to avoid naming conflicts with property names

    public static final String __ENTITY_NAME = "GroupItem";

    public static final int __ENTITY_ID = 12;

    public static final Class<GroupItem> __ENTITY_CLASS = GroupItem.class;

    public static final String __DB_NAME = "GroupItem";

    public static final CursorFactory<GroupItem> __CURSOR_FACTORY = new Factory();

    @Internal
    static final GroupItemIdGetter __ID_GETTER = new GroupItemIdGetter();

    public final static GroupItem_ __INSTANCE = new GroupItem_();

    public final static io.objectbox.Property<GroupItem> id =
        new io.objectbox.Property<>(__INSTANCE, 0, 1, long.class, "id", true, "id");

    public final static io.objectbox.Property<GroupItem> order =
        new io.objectbox.Property<>(__INSTANCE, 1, 2, int.class, "order");

    public final static io.objectbox.Property<GroupItem> contentId =
        new io.objectbox.Property<>(__INSTANCE, 2, 3, long.class, "contentId", true);

    public final static io.objectbox.Property<GroupItem> groupId =
        new io.objectbox.Property<>(__INSTANCE, 3, 4, long.class, "groupId", true);

    @SuppressWarnings("unchecked")
    public final static io.objectbox.Property<GroupItem>[] __ALL_PROPERTIES = new io.objectbox.Property[]{
        id,
        order,
        contentId,
        groupId
    };

    public final static io.objectbox.Property<GroupItem> __ID_PROPERTY = id;

    @Override
    public String getEntityName() {
        return __ENTITY_NAME;
    }

    @Override
    public int getEntityId() {
        return __ENTITY_ID;
    }

    @Override
    public Class<GroupItem> getEntityClass() {
        return __ENTITY_CLASS;
    }

    @Override
    public String getDbName() {
        return __DB_NAME;
    }

    @Override
    public io.objectbox.Property<GroupItem>[] getAllProperties() {
        return __ALL_PROPERTIES;
    }

    @Override
    public io.objectbox.Property<GroupItem> getIdProperty() {
        return __ID_PROPERTY;
    }

    @Override
    public IdGetter<GroupItem> getIdGetter() {
        return __ID_GETTER;
    }

    @Override
    public CursorFactory<GroupItem> getCursorFactory() {
        return __CURSOR_FACTORY;
    }

    @Internal
    static final class GroupItemIdGetter implements IdGetter<GroupItem> {
        @Override
        public long getId(GroupItem object) {
            return object.id;
        }
    }

    /** To-one relation "content" to target entity "Content". */
    public static final RelationInfo<GroupItem, Content> content =
            new RelationInfo<>(GroupItem_.__INSTANCE, Content_.__INSTANCE, contentId, new ToOneGetter<GroupItem, Content>() {
                @Override
                public ToOne<Content> getToOne(GroupItem entity) {
                    return entity.content;
                }
            });

    /** To-one relation "group" to target entity "Group". */
    public static final RelationInfo<GroupItem, Group> group =
            new RelationInfo<>(GroupItem_.__INSTANCE, Group_.__INSTANCE, groupId, new ToOneGetter<GroupItem, Group>() {
                @Override
                public ToOne<Group> getToOne(GroupItem entity) {
                    return entity.group;
                }
            });

}
