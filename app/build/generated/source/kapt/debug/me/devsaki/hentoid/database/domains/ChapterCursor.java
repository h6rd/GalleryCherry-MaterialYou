package me.devsaki.hentoid.database.domains;

import io.objectbox.BoxStore;
import io.objectbox.Cursor;
import io.objectbox.annotation.apihint.Internal;
import io.objectbox.internal.CursorFactory;
import io.objectbox.relation.ToMany;
import io.objectbox.relation.ToOne;
import java.util.List;

// THIS CODE IS GENERATED BY ObjectBox, DO NOT EDIT.

/**
 * ObjectBox generated Cursor implementation for "Chapter".
 * Note that this is a low-level class: usually you should stick to the Box class.
 */
public final class ChapterCursor extends Cursor<Chapter> {
    @Internal
    static final class Factory implements CursorFactory<Chapter> {
        @Override
        public Cursor<Chapter> createCursor(io.objectbox.Transaction tx, long cursorHandle, BoxStore boxStoreForEntities) {
            return new ChapterCursor(tx, cursorHandle, boxStoreForEntities);
        }
    }

    private static final Chapter_.ChapterIdGetter ID_GETTER = Chapter_.__ID_GETTER;


    private final static int __ID_order = Chapter_.order.id;
    private final static int __ID_url = Chapter_.url.id;
    private final static int __ID_name = Chapter_.name.id;
    private final static int __ID_uniqueId = Chapter_.uniqueId.id;
    private final static int __ID_uploadDate = Chapter_.uploadDate.id;
    private final static int __ID_contentId = Chapter_.contentId.id;

    public ChapterCursor(io.objectbox.Transaction tx, long cursor, BoxStore boxStore) {
        super(tx, cursor, Chapter_.__INSTANCE, boxStore);
    }

    @Override
    public long getId(Chapter entity) {
        return ID_GETTER.getId(entity);
    }

    /**
     * Puts an object into its box.
     *
     * @return The ID of the object within its box.
     */
    @SuppressWarnings({"rawtypes", "unchecked"}) 
    @Override
    public long put(Chapter entity) {
        ToOne<Content> content = entity.getContent();
        if(content != null && content.internalRequiresPutTarget()) {
            Cursor<Content> targetCursor = getRelationTargetCursor(Content.class);
            try {
                content.internalPutTarget(targetCursor);
            } finally {
                targetCursor.close();
            }
        }
        String url = entity.getUrl();
        int __id2 = url != null ? __ID_url : 0;
        String name = entity.getName();
        int __id3 = name != null ? __ID_name : 0;
        String uniqueId = entity.getUniqueId();
        int __id4 = uniqueId != null ? __ID_uniqueId : 0;
        Integer order = entity.getOrder();
        int __id1 = order != null ? __ID_order : 0;

        long __assignedId = collect313311(cursor, entity.getId(), PUT_FLAG_FIRST | PUT_FLAG_COMPLETE,
                __id2, url, __id3, name,
                __id4, uniqueId, 0, null,
                __ID_uploadDate, entity.getUploadDate(), __ID_contentId, entity.getContent().getTargetId(),
                __id1, __id1 != 0 ? order : 0, 0, 0,
                0, 0, 0, 0,
                0, 0, 0, 0);

        entity.setId(__assignedId);

        attachEntity(entity);
        checkApplyToManyToDb(entity.getImageFiles(), ImageFile.class);
        return __assignedId;
    }

    private void attachEntity(Chapter entity) {
        // Transformer will create __boxStore field in entity and init it here:
        // entity.__boxStore = boxStoreForEntities;
    }

}
