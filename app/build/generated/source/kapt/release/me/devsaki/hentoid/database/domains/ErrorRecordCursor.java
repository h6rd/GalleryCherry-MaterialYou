package me.devsaki.hentoid.database.domains;

import io.objectbox.BoxStore;
import io.objectbox.Cursor;
import io.objectbox.annotation.apihint.Internal;
import io.objectbox.internal.CursorFactory;
import io.objectbox.relation.ToOne;
import java.time.Instant;
import java.util.List;
import me.devsaki.hentoid.database.converters.InstantConverter;
import me.devsaki.hentoid.enums.ErrorType;
import me.devsaki.hentoid.enums.ErrorType.ErrorTypeConverter;

// THIS CODE IS GENERATED BY ObjectBox, DO NOT EDIT.

/**
 * ObjectBox generated Cursor implementation for "ErrorRecord".
 * Note that this is a low-level class: usually you should stick to the Box class.
 */
public final class ErrorRecordCursor extends Cursor<ErrorRecord> {
    @Internal
    static final class Factory implements CursorFactory<ErrorRecord> {
        @Override
        public Cursor<ErrorRecord> createCursor(io.objectbox.Transaction tx, long cursorHandle, BoxStore boxStoreForEntities) {
            return new ErrorRecordCursor(tx, cursorHandle, boxStoreForEntities);
        }
    }

    private static final ErrorRecord_.ErrorRecordIdGetter ID_GETTER = ErrorRecord_.__ID_GETTER;

    private final ErrorTypeConverter typeConverter = new ErrorTypeConverter();
    private final InstantConverter timestampConverter = new InstantConverter();

    private final static int __ID_type = ErrorRecord_.type.id;
    private final static int __ID_url = ErrorRecord_.url.id;
    private final static int __ID_contentPart = ErrorRecord_.contentPart.id;
    private final static int __ID_description = ErrorRecord_.description.id;
    private final static int __ID_timestamp = ErrorRecord_.timestamp.id;
    private final static int __ID_contentId = ErrorRecord_.contentId.id;

    public ErrorRecordCursor(io.objectbox.Transaction tx, long cursor, BoxStore boxStore) {
        super(tx, cursor, ErrorRecord_.__INSTANCE, boxStore);
    }

    @Override
    public long getId(ErrorRecord entity) {
        return ID_GETTER.getId(entity);
    }

    /**
     * Puts an object into its box.
     *
     * @return The ID of the object within its box.
     */
    @SuppressWarnings({"rawtypes", "unchecked"}) 
    @Override
    public long put(ErrorRecord entity) {
        ToOne<Content> content = entity.getContent();
        if(content != null && content.internalRequiresPutTarget()) {
            Cursor<Content> targetCursor = getRelationTargetCursor(Content.class);
            try {
                content.internalPutTarget(targetCursor);
            } finally {
                targetCursor.close();
            }
        }
        String url = entity.getUrl();
        int __id2 = url != null ? __ID_url : 0;
        String contentPart = entity.getContentPart();
        int __id3 = contentPart != null ? __ID_contentPart : 0;
        String description = entity.getDescription();
        int __id4 = description != null ? __ID_description : 0;
        Instant timestamp = entity.getTimestamp();
        int __id5 = timestamp != null ? __ID_timestamp : 0;
        ErrorType type = entity.getType();
        int __id1 = type != null ? __ID_type : 0;

        long __assignedId = collect313311(cursor, entity.id, PUT_FLAG_FIRST | PUT_FLAG_COMPLETE,
                __id2, url, __id3, contentPart,
                __id4, description, 0, null,
                __id5, __id5 != 0 ? timestampConverter.convertToDatabaseValue(timestamp) : 0, __ID_contentId, entity.getContent().getTargetId(),
                __id1, __id1 != 0 ? typeConverter.convertToDatabaseValue(type) : 0, 0, 0,
                0, 0, 0, 0,
                0, 0, 0, 0);

        entity.id = __assignedId;

        attachEntity(entity);
        return __assignedId;
    }

    private void attachEntity(ErrorRecord entity) {
        // Transformer will create __boxStore field in entity and init it here:
        // entity.__boxStore = boxStoreForEntities;
    }

}
