
package me.devsaki.hentoid.database.domains;

import io.objectbox.EntityInfo;
import io.objectbox.annotation.apihint.Internal;
import io.objectbox.internal.CursorFactory;
import io.objectbox.internal.IdGetter;
import io.objectbox.internal.ToManyGetter;
import io.objectbox.internal.ToOneGetter;
import io.objectbox.relation.RelationInfo;
import io.objectbox.relation.ToOne;
import java.util.List;
import me.devsaki.hentoid.database.domains.ChapterCursor.Factory;

// THIS CODE IS GENERATED BY ObjectBox, DO NOT EDIT.

/**
 * Properties for entity "Chapter". Can be used for QueryBuilder and for referencing DB names.
 */
public final class Chapter_ implements EntityInfo<Chapter> {

    // Leading underscores for static constants to avoid naming conflicts with property names

    public static final String __ENTITY_NAME = "Chapter";

    public static final int __ENTITY_ID = 15;

    public static final Class<Chapter> __ENTITY_CLASS = Chapter.class;

    public static final String __DB_NAME = "Chapter";

    public static final CursorFactory<Chapter> __CURSOR_FACTORY = new Factory();

    @Internal
    static final ChapterIdGetter __ID_GETTER = new ChapterIdGetter();

    public final static Chapter_ __INSTANCE = new Chapter_();

    public final static io.objectbox.Property<Chapter> id =
        new io.objectbox.Property<>(__INSTANCE, 0, 1, long.class, "id", true, "id");

    public final static io.objectbox.Property<Chapter> order =
        new io.objectbox.Property<>(__INSTANCE, 1, 2, Integer.class, "order");

    public final static io.objectbox.Property<Chapter> url =
        new io.objectbox.Property<>(__INSTANCE, 2, 3, String.class, "url");

    public final static io.objectbox.Property<Chapter> name =
        new io.objectbox.Property<>(__INSTANCE, 3, 4, String.class, "name");

    public final static io.objectbox.Property<Chapter> uniqueId =
        new io.objectbox.Property<>(__INSTANCE, 4, 6, String.class, "uniqueId");

    public final static io.objectbox.Property<Chapter> uploadDate =
        new io.objectbox.Property<>(__INSTANCE, 5, 7, long.class, "uploadDate");

    public final static io.objectbox.Property<Chapter> contentId =
        new io.objectbox.Property<>(__INSTANCE, 6, 5, long.class, "contentId", true);

    @SuppressWarnings("unchecked")
    public final static io.objectbox.Property<Chapter>[] __ALL_PROPERTIES = new io.objectbox.Property[]{
        id,
        order,
        url,
        name,
        uniqueId,
        uploadDate,
        contentId
    };

    public final static io.objectbox.Property<Chapter> __ID_PROPERTY = id;

    @Override
    public String getEntityName() {
        return __ENTITY_NAME;
    }

    @Override
    public int getEntityId() {
        return __ENTITY_ID;
    }

    @Override
    public Class<Chapter> getEntityClass() {
        return __ENTITY_CLASS;
    }

    @Override
    public String getDbName() {
        return __DB_NAME;
    }

    @Override
    public io.objectbox.Property<Chapter>[] getAllProperties() {
        return __ALL_PROPERTIES;
    }

    @Override
    public io.objectbox.Property<Chapter> getIdProperty() {
        return __ID_PROPERTY;
    }

    @Override
    public IdGetter<Chapter> getIdGetter() {
        return __ID_GETTER;
    }

    @Override
    public CursorFactory<Chapter> getCursorFactory() {
        return __CURSOR_FACTORY;
    }

    @Internal
    static final class ChapterIdGetter implements IdGetter<Chapter> {
        @Override
        public long getId(Chapter object) {
            return object.getId();
        }
    }

    /** To-one relation "content" to target entity "Content". */
    public static final RelationInfo<Chapter, Content> content =
            new RelationInfo<>(Chapter_.__INSTANCE, Content_.__INSTANCE, contentId, new ToOneGetter<Chapter, Content>() {
                @Override
                public ToOne<Content> getToOne(Chapter entity) {
                    return entity.getContent();
                }
            });

    /** To-many relation "imageFiles" to target entity "ImageFile". */
    public static final RelationInfo<Chapter, ImageFile> imageFiles = new RelationInfo<>(Chapter_.__INSTANCE, ImageFile_.__INSTANCE,
            new ToManyGetter<Chapter, ImageFile>() {
                @Override
                public List<ImageFile> getToMany(Chapter entity) {
                    return entity.getImageFiles();
                }
            },
            ImageFile_.chapterId,
            new ToOneGetter<ImageFile, Chapter>() {
                @Override
                public ToOne<Chapter> getToOne(ImageFile entity) {
                    return entity.getChapter();
                }
            });

}
