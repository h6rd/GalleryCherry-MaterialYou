
package me.devsaki.hentoid.database.domains;

import io.objectbox.EntityInfo;
import io.objectbox.annotation.apihint.Internal;
import io.objectbox.internal.CursorFactory;
import io.objectbox.internal.IdGetter;
import io.objectbox.internal.ToOneGetter;
import io.objectbox.relation.RelationInfo;
import io.objectbox.relation.ToOne;
import java.time.Instant;
import me.devsaki.hentoid.database.converters.InstantConverter;
import me.devsaki.hentoid.database.domains.ErrorRecordCursor.Factory;
import me.devsaki.hentoid.enums.ErrorType;
import me.devsaki.hentoid.enums.ErrorType.ErrorTypeConverter;

// THIS CODE IS GENERATED BY ObjectBox, DO NOT EDIT.

/**
 * Properties for entity "ErrorRecord". Can be used for QueryBuilder and for referencing DB names.
 */
public final class ErrorRecord_ implements EntityInfo<ErrorRecord> {

    // Leading underscores for static constants to avoid naming conflicts with property names

    public static final String __ENTITY_NAME = "ErrorRecord";

    public static final int __ENTITY_ID = 8;

    public static final Class<ErrorRecord> __ENTITY_CLASS = ErrorRecord.class;

    public static final String __DB_NAME = "ErrorRecord";

    public static final CursorFactory<ErrorRecord> __CURSOR_FACTORY = new Factory();

    @Internal
    static final ErrorRecordIdGetter __ID_GETTER = new ErrorRecordIdGetter();

    public final static ErrorRecord_ __INSTANCE = new ErrorRecord_();

    public final static io.objectbox.Property<ErrorRecord> id =
        new io.objectbox.Property<>(__INSTANCE, 0, 1, long.class, "id", true, "id");

    public final static io.objectbox.Property<ErrorRecord> type =
        new io.objectbox.Property<>(__INSTANCE, 1, 2, int.class, "type", false, "type", ErrorTypeConverter.class, ErrorType.class);

    public final static io.objectbox.Property<ErrorRecord> url =
        new io.objectbox.Property<>(__INSTANCE, 2, 3, String.class, "url");

    public final static io.objectbox.Property<ErrorRecord> contentPart =
        new io.objectbox.Property<>(__INSTANCE, 3, 4, String.class, "contentPart");

    public final static io.objectbox.Property<ErrorRecord> description =
        new io.objectbox.Property<>(__INSTANCE, 4, 5, String.class, "description");

    public final static io.objectbox.Property<ErrorRecord> timestamp =
        new io.objectbox.Property<>(__INSTANCE, 5, 7, long.class, "timestamp", false, "timestamp", InstantConverter.class, Instant.class);

    public final static io.objectbox.Property<ErrorRecord> contentId =
        new io.objectbox.Property<>(__INSTANCE, 6, 6, long.class, "contentId", true);

    @SuppressWarnings("unchecked")
    public final static io.objectbox.Property<ErrorRecord>[] __ALL_PROPERTIES = new io.objectbox.Property[]{
        id,
        type,
        url,
        contentPart,
        description,
        timestamp,
        contentId
    };

    public final static io.objectbox.Property<ErrorRecord> __ID_PROPERTY = id;

    @Override
    public String getEntityName() {
        return __ENTITY_NAME;
    }

    @Override
    public int getEntityId() {
        return __ENTITY_ID;
    }

    @Override
    public Class<ErrorRecord> getEntityClass() {
        return __ENTITY_CLASS;
    }

    @Override
    public String getDbName() {
        return __DB_NAME;
    }

    @Override
    public io.objectbox.Property<ErrorRecord>[] getAllProperties() {
        return __ALL_PROPERTIES;
    }

    @Override
    public io.objectbox.Property<ErrorRecord> getIdProperty() {
        return __ID_PROPERTY;
    }

    @Override
    public IdGetter<ErrorRecord> getIdGetter() {
        return __ID_GETTER;
    }

    @Override
    public CursorFactory<ErrorRecord> getCursorFactory() {
        return __CURSOR_FACTORY;
    }

    @Internal
    static final class ErrorRecordIdGetter implements IdGetter<ErrorRecord> {
        @Override
        public long getId(ErrorRecord object) {
            return object.id;
        }
    }

    /** To-one relation "content" to target entity "Content". */
    public static final RelationInfo<ErrorRecord, Content> content =
            new RelationInfo<>(ErrorRecord_.__INSTANCE, Content_.__INSTANCE, contentId, new ToOneGetter<ErrorRecord, Content>() {
                @Override
                public ToOne<Content> getToOne(ErrorRecord entity) {
                    return entity.getContent();
                }
            });

}
