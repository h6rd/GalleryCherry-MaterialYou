
package me.devsaki.hentoid.database.domains;

import io.objectbox.EntityInfo;
import io.objectbox.annotation.apihint.Internal;
import io.objectbox.internal.CursorFactory;
import io.objectbox.internal.IdGetter;
import io.objectbox.internal.ToManyGetter;
import io.objectbox.internal.ToOneGetter;
import io.objectbox.relation.RelationInfo;
import io.objectbox.relation.ToOne;
import java.util.List;
import me.devsaki.hentoid.database.domains.AttributeCursor.Factory;
import me.devsaki.hentoid.enums.AttributeType;
import me.devsaki.hentoid.enums.AttributeType.AttributeTypeConverter;

// THIS CODE IS GENERATED BY ObjectBox, DO NOT EDIT.

/**
 * Properties for entity "Attribute". Can be used for QueryBuilder and for referencing DB names.
 */
public final class Attribute_ implements EntityInfo<Attribute> {

    // Leading underscores for static constants to avoid naming conflicts with property names

    public static final String __ENTITY_NAME = "Attribute";

    public static final int __ENTITY_ID = 1;

    public static final Class<Attribute> __ENTITY_CLASS = Attribute.class;

    public static final String __DB_NAME = "Attribute";

    public static final CursorFactory<Attribute> __CURSOR_FACTORY = new Factory();

    @Internal
    static final AttributeIdGetter __ID_GETTER = new AttributeIdGetter();

    public final static Attribute_ __INSTANCE = new Attribute_();

    public final static io.objectbox.Property<Attribute> id =
        new io.objectbox.Property<>(__INSTANCE, 0, 1, long.class, "id", true, "id");

    public final static io.objectbox.Property<Attribute> name =
        new io.objectbox.Property<>(__INSTANCE, 1, 3, String.class, "name");

    public final static io.objectbox.Property<Attribute> type =
        new io.objectbox.Property<>(__INSTANCE, 2, 4, int.class, "type", false, "type", AttributeTypeConverter.class, AttributeType.class);

    public final static io.objectbox.Property<Attribute> groupId =
        new io.objectbox.Property<>(__INSTANCE, 3, 6, long.class, "groupId", true);

    @SuppressWarnings("unchecked")
    public final static io.objectbox.Property<Attribute>[] __ALL_PROPERTIES = new io.objectbox.Property[]{
        id,
        name,
        type,
        groupId
    };

    public final static io.objectbox.Property<Attribute> __ID_PROPERTY = id;

    @Override
    public String getEntityName() {
        return __ENTITY_NAME;
    }

    @Override
    public int getEntityId() {
        return __ENTITY_ID;
    }

    @Override
    public Class<Attribute> getEntityClass() {
        return __ENTITY_CLASS;
    }

    @Override
    public String getDbName() {
        return __DB_NAME;
    }

    @Override
    public io.objectbox.Property<Attribute>[] getAllProperties() {
        return __ALL_PROPERTIES;
    }

    @Override
    public io.objectbox.Property<Attribute> getIdProperty() {
        return __ID_PROPERTY;
    }

    @Override
    public IdGetter<Attribute> getIdGetter() {
        return __ID_GETTER;
    }

    @Override
    public CursorFactory<Attribute> getCursorFactory() {
        return __CURSOR_FACTORY;
    }

    @Internal
    static final class AttributeIdGetter implements IdGetter<Attribute> {
        @Override
        public long getId(Attribute object) {
            return object.getId();
        }
    }

    /** To-one relation "group" to target entity "Group". */
    public static final RelationInfo<Attribute, Group> group =
            new RelationInfo<>(Attribute_.__INSTANCE, Group_.__INSTANCE, groupId, new ToOneGetter<Attribute, Group>() {
                @Override
                public ToOne<Group> getToOne(Attribute entity) {
                    return entity.getGroup();
                }
            });

    /** To-many relation "locations" to target entity "AttributeLocation". */
    public static final RelationInfo<Attribute, AttributeLocation> locations = new RelationInfo<>(Attribute_.__INSTANCE, AttributeLocation_.__INSTANCE,
            new ToManyGetter<Attribute, AttributeLocation>() {
                @Override
                public List<AttributeLocation> getToMany(Attribute entity) {
                    return entity.getLocations();
                }
            },
            AttributeLocation_.attributeId,
            new ToOneGetter<AttributeLocation, Attribute>() {
                @Override
                public ToOne<Attribute> getToOne(AttributeLocation entity) {
                    return entity.attribute;
                }
            });

    /** To-many relation "contents" to target entity "Content". */
    public static final RelationInfo<Attribute, Content> contents = new RelationInfo<>(Attribute_.__INSTANCE, Content_.__INSTANCE,
            new ToManyGetter<Attribute, Content>() {
                @Override
                public List<Content> getToMany(Attribute entity) {
                    return entity.contents;
                }
            },
            new ToManyGetter<Content, Attribute>() {
                @Override
                public List<Attribute> getToMany(Content entity) {
                    return entity.getAttributes();
                }
            }, 1);

}
