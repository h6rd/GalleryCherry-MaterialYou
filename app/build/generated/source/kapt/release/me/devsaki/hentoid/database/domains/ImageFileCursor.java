package me.devsaki.hentoid.database.domains;

import io.objectbox.BoxStore;
import io.objectbox.Cursor;
import io.objectbox.annotation.apihint.Internal;
import io.objectbox.internal.CursorFactory;
import io.objectbox.relation.ToOne;
import java.util.List;
import me.devsaki.hentoid.enums.StatusContent;
import me.devsaki.hentoid.enums.StatusContent.StatusContentConverter;

// THIS CODE IS GENERATED BY ObjectBox, DO NOT EDIT.

/**
 * ObjectBox generated Cursor implementation for "ImageFile".
 * Note that this is a low-level class: usually you should stick to the Box class.
 */
public final class ImageFileCursor extends Cursor<ImageFile> {
    @Internal
    static final class Factory implements CursorFactory<ImageFile> {
        @Override
        public Cursor<ImageFile> createCursor(io.objectbox.Transaction tx, long cursorHandle, BoxStore boxStoreForEntities) {
            return new ImageFileCursor(tx, cursorHandle, boxStoreForEntities);
        }
    }

    private static final ImageFile_.ImageFileIdGetter ID_GETTER = ImageFile_.__ID_GETTER;

    private final StatusContentConverter statusConverter = new StatusContentConverter();

    private final static int __ID_order = ImageFile_.order.id;
    private final static int __ID_url = ImageFile_.url.id;
    private final static int __ID_pageUrl = ImageFile_.pageUrl.id;
    private final static int __ID_name = ImageFile_.name.id;
    private final static int __ID_fileUri = ImageFile_.fileUri.id;
    private final static int __ID_read = ImageFile_.read.id;
    private final static int __ID_favourite = ImageFile_.favourite.id;
    private final static int __ID_isCover = ImageFile_.isCover.id;
    private final static int __ID_status = ImageFile_.status.id;
    private final static int __ID_mimeType = ImageFile_.mimeType.id;
    private final static int __ID_size = ImageFile_.size.id;
    private final static int __ID_imageHash = ImageFile_.imageHash.id;
    private final static int __ID_downloadParams = ImageFile_.downloadParams.id;
    private final static int __ID_contentId = ImageFile_.contentId.id;
    private final static int __ID_chapterId = ImageFile_.chapterId.id;

    public ImageFileCursor(io.objectbox.Transaction tx, long cursor, BoxStore boxStore) {
        super(tx, cursor, ImageFile_.__INSTANCE, boxStore);
    }

    @Override
    public long getId(ImageFile entity) {
        return ID_GETTER.getId(entity);
    }

    /**
     * Puts an object into its box.
     *
     * @return The ID of the object within its box.
     */
    @SuppressWarnings({"rawtypes", "unchecked"}) 
    @Override
    public long put(ImageFile entity) {
        ToOne<Content> content = entity.getContent();
        if(content != null && content.internalRequiresPutTarget()) {
            Cursor<Content> targetCursor = getRelationTargetCursor(Content.class);
            try {
                content.internalPutTarget(targetCursor);
            } finally {
                targetCursor.close();
            }
        }
        ToOne<Chapter> chapter = entity.getChapter();
        if(chapter != null && chapter.internalRequiresPutTarget()) {
            Cursor<Chapter> targetCursor = getRelationTargetCursor(Chapter.class);
            try {
                chapter.internalPutTarget(targetCursor);
            } finally {
                targetCursor.close();
            }
        }
        String url = entity.getUrl();
        int __id2 = url != null ? __ID_url : 0;
        String pageUrl = entity.getPageUrl();
        int __id3 = pageUrl != null ? __ID_pageUrl : 0;
        String name = entity.getName();
        int __id4 = name != null ? __ID_name : 0;
        String fileUri = entity.getFileUri();
        int __id5 = fileUri != null ? __ID_fileUri : 0;

        collect400000(cursor, 0, PUT_FLAG_FIRST,
                __id2, url, __id3, pageUrl,
                __id4, name, __id5, fileUri);

        String mimeType = entity.getMimeType();
        int __id10 = mimeType != null ? __ID_mimeType : 0;
        String downloadParams = entity.getDownloadParams();
        int __id13 = downloadParams != null ? __ID_downloadParams : 0;
        Integer order = entity.getOrder();
        int __id1 = order != null ? __ID_order : 0;
        StatusContent status = entity.getStatus();
        int __id9 = status != null ? __ID_status : 0;

        collect313311(cursor, 0, 0,
                __id10, mimeType, __id13, downloadParams,
                0, null, 0, null,
                __ID_size, entity.getSize(), __ID_imageHash, entity.getImageHash(),
                __ID_contentId, entity.getContent().getTargetId(), __id1, __id1 != 0 ? order : 0,
                __id9, __id9 != 0 ? statusConverter.convertToDatabaseValue(status) : 0, __ID_read, entity.isRead() ? 1 : 0,
                0, 0, 0, 0);

        long __assignedId = collect313311(cursor, entity.getId(), PUT_FLAG_COMPLETE,
                0, null, 0, null,
                0, null, 0, null,
                __ID_chapterId, entity.getChapter().getTargetId(), __ID_favourite, entity.isFavourite() ? 1 : 0,
                __ID_isCover, entity.isCover() ? 1 : 0, 0, 0,
                0, 0, 0, 0,
                0, 0, 0, 0);

        entity.setId(__assignedId);

        attachEntity(entity);
        return __assignedId;
    }

    private void attachEntity(ImageFile entity) {
        // Transformer will create __boxStore field in entity and init it here:
        // entity.__boxStore = boxStoreForEntities;
    }

}
