
package me.devsaki.hentoid.database.domains;

import io.objectbox.EntityInfo;
import io.objectbox.annotation.apihint.Internal;
import io.objectbox.internal.CursorFactory;
import io.objectbox.internal.IdGetter;
import io.objectbox.internal.ToManyGetter;
import io.objectbox.internal.ToOneGetter;
import io.objectbox.relation.RelationInfo;
import io.objectbox.relation.ToOne;
import java.util.List;
import me.devsaki.hentoid.database.domains.Group.GroupingConverter;
import me.devsaki.hentoid.database.domains.GroupCursor.Factory;
import me.devsaki.hentoid.enums.Grouping;

// THIS CODE IS GENERATED BY ObjectBox, DO NOT EDIT.

/**
 * Properties for entity "Group". Can be used for QueryBuilder and for referencing DB names.
 */
public final class Group_ implements EntityInfo<Group> {

    // Leading underscores for static constants to avoid naming conflicts with property names

    public static final String __ENTITY_NAME = "Group";

    public static final int __ENTITY_ID = 11;

    public static final Class<Group> __ENTITY_CLASS = Group.class;

    public static final String __DB_NAME = "Group";

    public static final CursorFactory<Group> __CURSOR_FACTORY = new Factory();

    @Internal
    static final GroupIdGetter __ID_GETTER = new GroupIdGetter();

    public final static Group_ __INSTANCE = new Group_();

    public final static io.objectbox.Property<Group> id =
        new io.objectbox.Property<>(__INSTANCE, 0, 1, long.class, "id", true, "id");

    public final static io.objectbox.Property<Group> grouping =
        new io.objectbox.Property<>(__INSTANCE, 1, 2, int.class, "grouping", false, "grouping", GroupingConverter.class, Grouping.class);

    public final static io.objectbox.Property<Group> name =
        new io.objectbox.Property<>(__INSTANCE, 2, 3, String.class, "name");

    public final static io.objectbox.Property<Group> subtype =
        new io.objectbox.Property<>(__INSTANCE, 3, 4, int.class, "subtype");

    public final static io.objectbox.Property<Group> order =
        new io.objectbox.Property<>(__INSTANCE, 4, 5, int.class, "order");

    public final static io.objectbox.Property<Group> hasCustomBookOrder =
        new io.objectbox.Property<>(__INSTANCE, 5, 6, boolean.class, "hasCustomBookOrder");

    public final static io.objectbox.Property<Group> propertyMin =
        new io.objectbox.Property<>(__INSTANCE, 6, 7, int.class, "propertyMin");

    public final static io.objectbox.Property<Group> propertyMax =
        new io.objectbox.Property<>(__INSTANCE, 7, 8, int.class, "propertyMax");

    public final static io.objectbox.Property<Group> searchUri =
        new io.objectbox.Property<>(__INSTANCE, 8, 15, String.class, "searchUri");

    public final static io.objectbox.Property<Group> favourite =
        new io.objectbox.Property<>(__INSTANCE, 9, 12, boolean.class, "favourite");

    public final static io.objectbox.Property<Group> rating =
        new io.objectbox.Property<>(__INSTANCE, 10, 14, int.class, "rating");

    public final static io.objectbox.Property<Group> isBeingProcessed =
        new io.objectbox.Property<>(__INSTANCE, 11, 16, boolean.class, "isBeingProcessed");

    public final static io.objectbox.Property<Group> isFlaggedForDeletion =
        new io.objectbox.Property<>(__INSTANCE, 12, 10, boolean.class, "isFlaggedForDeletion");

    public final static io.objectbox.Property<Group> coverContentId =
        new io.objectbox.Property<>(__INSTANCE, 13, 13, long.class, "coverContentId", true);

    @SuppressWarnings("unchecked")
    public final static io.objectbox.Property<Group>[] __ALL_PROPERTIES = new io.objectbox.Property[]{
        id,
        grouping,
        name,
        subtype,
        order,
        hasCustomBookOrder,
        propertyMin,
        propertyMax,
        searchUri,
        favourite,
        rating,
        isBeingProcessed,
        isFlaggedForDeletion,
        coverContentId
    };

    public final static io.objectbox.Property<Group> __ID_PROPERTY = id;

    @Override
    public String getEntityName() {
        return __ENTITY_NAME;
    }

    @Override
    public int getEntityId() {
        return __ENTITY_ID;
    }

    @Override
    public Class<Group> getEntityClass() {
        return __ENTITY_CLASS;
    }

    @Override
    public String getDbName() {
        return __DB_NAME;
    }

    @Override
    public io.objectbox.Property<Group>[] getAllProperties() {
        return __ALL_PROPERTIES;
    }

    @Override
    public io.objectbox.Property<Group> getIdProperty() {
        return __ID_PROPERTY;
    }

    @Override
    public IdGetter<Group> getIdGetter() {
        return __ID_GETTER;
    }

    @Override
    public CursorFactory<Group> getCursorFactory() {
        return __CURSOR_FACTORY;
    }

    @Internal
    static final class GroupIdGetter implements IdGetter<Group> {
        @Override
        public long getId(Group object) {
            return object.id;
        }
    }

    /** To-one relation "coverContent" to target entity "Content". */
    public static final RelationInfo<Group, Content> coverContent =
            new RelationInfo<>(Group_.__INSTANCE, Content_.__INSTANCE, coverContentId, new ToOneGetter<Group, Content>() {
                @Override
                public ToOne<Content> getToOne(Group entity) {
                    return entity.coverContent;
                }
            });

    /** To-many relation "items" to target entity "GroupItem". */
    public static final RelationInfo<Group, GroupItem> items = new RelationInfo<>(Group_.__INSTANCE, GroupItem_.__INSTANCE,
            new ToManyGetter<Group, GroupItem>() {
                @Override
                public List<GroupItem> getToMany(Group entity) {
                    return entity.items;
                }
            },
            GroupItem_.groupId,
            new ToOneGetter<GroupItem, Group>() {
                @Override
                public ToOne<Group> getToOne(GroupItem entity) {
                    return entity.group;
                }
            });

}
