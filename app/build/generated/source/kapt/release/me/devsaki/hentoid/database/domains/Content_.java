
package me.devsaki.hentoid.database.domains;

import io.objectbox.EntityInfo;
import io.objectbox.annotation.apihint.Internal;
import io.objectbox.internal.CursorFactory;
import io.objectbox.internal.IdGetter;
import io.objectbox.internal.ToManyGetter;
import io.objectbox.internal.ToOneGetter;
import io.objectbox.relation.RelationInfo;
import io.objectbox.relation.ToOne;
import java.util.List;
import java.util.Map;
import me.devsaki.hentoid.database.domains.Content.StringMapConverter;
import me.devsaki.hentoid.database.domains.ContentCursor.Factory;
import me.devsaki.hentoid.enums.Site;
import me.devsaki.hentoid.enums.Site.SiteConverter;
import me.devsaki.hentoid.enums.StatusContent;
import me.devsaki.hentoid.enums.StatusContent.StatusContentConverter;

// THIS CODE IS GENERATED BY ObjectBox, DO NOT EDIT.

/**
 * Properties for entity "Content". Can be used for QueryBuilder and for referencing DB names.
 */
public final class Content_ implements EntityInfo<Content> {

    // Leading underscores for static constants to avoid naming conflicts with property names

    public static final String __ENTITY_NAME = "Content";

    public static final int __ENTITY_ID = 2;

    public static final Class<Content> __ENTITY_CLASS = Content.class;

    public static final String __DB_NAME = "Content";

    public static final CursorFactory<Content> __CURSOR_FACTORY = new Factory();

    @Internal
    static final ContentIdGetter __ID_GETTER = new ContentIdGetter();

    public final static Content_ __INSTANCE = new Content_();

    public final static io.objectbox.Property<Content> id =
        new io.objectbox.Property<>(__INSTANCE, 0, 1, long.class, "id", true, "id");

    public final static io.objectbox.Property<Content> url =
        new io.objectbox.Property<>(__INSTANCE, 1, 2, String.class, "url");

    public final static io.objectbox.Property<Content> uniqueSiteId =
        new io.objectbox.Property<>(__INSTANCE, 2, 15, String.class, "uniqueSiteId");

    public final static io.objectbox.Property<Content> title =
        new io.objectbox.Property<>(__INSTANCE, 3, 3, String.class, "title");

    public final static io.objectbox.Property<Content> author =
        new io.objectbox.Property<>(__INSTANCE, 4, 4, String.class, "author");

    public final static io.objectbox.Property<Content> coverImageUrl =
        new io.objectbox.Property<>(__INSTANCE, 5, 5, String.class, "coverImageUrl");

    public final static io.objectbox.Property<Content> qtyPages =
        new io.objectbox.Property<>(__INSTANCE, 6, 6, Integer.class, "qtyPages");

    public final static io.objectbox.Property<Content> uploadDate =
        new io.objectbox.Property<>(__INSTANCE, 7, 7, long.class, "uploadDate");

    public final static io.objectbox.Property<Content> downloadDate =
        new io.objectbox.Property<>(__INSTANCE, 8, 8, long.class, "downloadDate");

    public final static io.objectbox.Property<Content> downloadCompletionDate =
        new io.objectbox.Property<>(__INSTANCE, 9, 29, long.class, "downloadCompletionDate");

    public final static io.objectbox.Property<Content> status =
        new io.objectbox.Property<>(__INSTANCE, 10, 9, int.class, "status", false, "status", StatusContentConverter.class, StatusContent.class);

    public final static io.objectbox.Property<Content> site =
        new io.objectbox.Property<>(__INSTANCE, 11, 10, long.class, "site", false, "site", SiteConverter.class, Site.class);

    public final static io.objectbox.Property<Content> storageUri =
        new io.objectbox.Property<>(__INSTANCE, 12, 21, String.class, "storageUri");

    public final static io.objectbox.Property<Content> favourite =
        new io.objectbox.Property<>(__INSTANCE, 13, 12, boolean.class, "favourite");

    public final static io.objectbox.Property<Content> rating =
        new io.objectbox.Property<>(__INSTANCE, 14, 30, int.class, "rating");

    public final static io.objectbox.Property<Content> completed =
        new io.objectbox.Property<>(__INSTANCE, 15, 26, boolean.class, "completed");

    public final static io.objectbox.Property<Content> reads =
        new io.objectbox.Property<>(__INSTANCE, 16, 13, long.class, "reads");

    public final static io.objectbox.Property<Content> lastReadDate =
        new io.objectbox.Property<>(__INSTANCE, 17, 14, long.class, "lastReadDate");

    public final static io.objectbox.Property<Content> lastReadPageIndex =
        new io.objectbox.Property<>(__INSTANCE, 18, 17, int.class, "lastReadPageIndex");

    public final static io.objectbox.Property<Content> manuallyMerged =
        new io.objectbox.Property<>(__INSTANCE, 19, 28, boolean.class, "manuallyMerged");

    public final static io.objectbox.Property<Content> bookPreferences =
        new io.objectbox.Property<>(__INSTANCE, 20, 22, String.class, "bookPreferences", false, "bookPreferences", StringMapConverter.class, Map.class);

    public final static io.objectbox.Property<Content> downloadMode =
        new io.objectbox.Property<>(__INSTANCE, 21, 27, int.class, "downloadMode");

    public final static io.objectbox.Property<Content> replacementTitle =
        new io.objectbox.Property<>(__INSTANCE, 22, 33, String.class, "replacementTitle");

    public final static io.objectbox.Property<Content> size =
        new io.objectbox.Property<>(__INSTANCE, 23, 23, long.class, "size");

    public final static io.objectbox.Property<Content> readProgress =
        new io.objectbox.Property<>(__INSTANCE, 24, 25, float.class, "readProgress");

    public final static io.objectbox.Property<Content> downloadParams =
        new io.objectbox.Property<>(__INSTANCE, 25, 16, String.class, "downloadParams");

    public final static io.objectbox.Property<Content> isBeingProcessed =
        new io.objectbox.Property<>(__INSTANCE, 26, 34, boolean.class, "isBeingProcessed");

    public final static io.objectbox.Property<Content> jsonUri =
        new io.objectbox.Property<>(__INSTANCE, 27, 19, String.class, "jsonUri");

    public final static io.objectbox.Property<Content> isFlaggedForDeletion =
        new io.objectbox.Property<>(__INSTANCE, 28, 24, boolean.class, "isFlaggedForDeletion");

    public final static io.objectbox.Property<Content> lastEditDate =
        new io.objectbox.Property<>(__INSTANCE, 29, 32, long.class, "lastEditDate");

    public final static io.objectbox.Property<Content> contentToReplaceId =
        new io.objectbox.Property<>(__INSTANCE, 30, 31, long.class, "contentToReplaceId", true);

    @SuppressWarnings("unchecked")
    public final static io.objectbox.Property<Content>[] __ALL_PROPERTIES = new io.objectbox.Property[]{
        id,
        url,
        uniqueSiteId,
        title,
        author,
        coverImageUrl,
        qtyPages,
        uploadDate,
        downloadDate,
        downloadCompletionDate,
        status,
        site,
        storageUri,
        favourite,
        rating,
        completed,
        reads,
        lastReadDate,
        lastReadPageIndex,
        manuallyMerged,
        bookPreferences,
        downloadMode,
        replacementTitle,
        size,
        readProgress,
        downloadParams,
        isBeingProcessed,
        jsonUri,
        isFlaggedForDeletion,
        lastEditDate,
        contentToReplaceId
    };

    public final static io.objectbox.Property<Content> __ID_PROPERTY = id;

    @Override
    public String getEntityName() {
        return __ENTITY_NAME;
    }

    @Override
    public int getEntityId() {
        return __ENTITY_ID;
    }

    @Override
    public Class<Content> getEntityClass() {
        return __ENTITY_CLASS;
    }

    @Override
    public String getDbName() {
        return __DB_NAME;
    }

    @Override
    public io.objectbox.Property<Content>[] getAllProperties() {
        return __ALL_PROPERTIES;
    }

    @Override
    public io.objectbox.Property<Content> getIdProperty() {
        return __ID_PROPERTY;
    }

    @Override
    public IdGetter<Content> getIdGetter() {
        return __ID_GETTER;
    }

    @Override
    public CursorFactory<Content> getCursorFactory() {
        return __CURSOR_FACTORY;
    }

    @Internal
    static final class ContentIdGetter implements IdGetter<Content> {
        @Override
        public long getId(Content object) {
            return object.getId();
        }
    }

    /** To-one relation "contentToReplace" to target entity "Content". */
    public static final RelationInfo<Content, Content> contentToReplace =
            new RelationInfo<>(Content_.__INSTANCE, Content_.__INSTANCE, contentToReplaceId, new ToOneGetter<Content, Content>() {
                @Override
                public ToOne<Content> getToOne(Content entity) {
                    return entity.getContentToReplace();
                }
            });

    /** To-many relation "attributes" to target entity "Attribute". */
    public static final RelationInfo<Content, Attribute> attributes = new RelationInfo<>(Content_.__INSTANCE, Attribute_.__INSTANCE,
            new ToManyGetter<Content, Attribute>() {
                @Override
                public List<Attribute> getToMany(Content entity) {
                    return entity.getAttributes();
                }
            },
             1);

    /** To-many relation "imageFiles" to target entity "ImageFile". */
    public static final RelationInfo<Content, ImageFile> imageFiles = new RelationInfo<>(Content_.__INSTANCE, ImageFile_.__INSTANCE,
            new ToManyGetter<Content, ImageFile>() {
                @Override
                public List<ImageFile> getToMany(Content entity) {
                    return entity.getImageFiles();
                }
            },
            ImageFile_.contentId,
            new ToOneGetter<ImageFile, Content>() {
                @Override
                public ToOne<Content> getToOne(ImageFile entity) {
                    return entity.getContent();
                }
            });

    /** To-many relation "groupItems" to target entity "GroupItem". */
    public static final RelationInfo<Content, GroupItem> groupItems = new RelationInfo<>(Content_.__INSTANCE, GroupItem_.__INSTANCE,
            new ToManyGetter<Content, GroupItem>() {
                @Override
                public List<GroupItem> getToMany(Content entity) {
                    return entity.groupItems;
                }
            },
            GroupItem_.contentId,
            new ToOneGetter<GroupItem, Content>() {
                @Override
                public ToOne<Content> getToOne(GroupItem entity) {
                    return entity.content;
                }
            });

    /** To-many relation "chapters" to target entity "Chapter". */
    public static final RelationInfo<Content, Chapter> chapters = new RelationInfo<>(Content_.__INSTANCE, Chapter_.__INSTANCE,
            new ToManyGetter<Content, Chapter>() {
                @Override
                public List<Chapter> getToMany(Content entity) {
                    return entity.getChapters();
                }
            },
            Chapter_.contentId,
            new ToOneGetter<Chapter, Content>() {
                @Override
                public ToOne<Content> getToOne(Chapter entity) {
                    return entity.getContent();
                }
            });

    /** To-many relation "queueRecords" to target entity "QueueRecord". */
    public static final RelationInfo<Content, QueueRecord> queueRecords = new RelationInfo<>(Content_.__INSTANCE, QueueRecord_.__INSTANCE,
            new ToManyGetter<Content, QueueRecord>() {
                @Override
                public List<QueueRecord> getToMany(Content entity) {
                    return entity.getQueueRecords();
                }
            },
            QueueRecord_.contentId,
            new ToOneGetter<QueueRecord, Content>() {
                @Override
                public ToOne<Content> getToOne(QueueRecord entity) {
                    return entity.getContent();
                }
            });

    /** To-many relation "errorLog" to target entity "ErrorRecord". */
    public static final RelationInfo<Content, ErrorRecord> errorLog = new RelationInfo<>(Content_.__INSTANCE, ErrorRecord_.__INSTANCE,
            new ToManyGetter<Content, ErrorRecord>() {
                @Override
                public List<ErrorRecord> getToMany(Content entity) {
                    return entity.getErrorLog();
                }
            },
            ErrorRecord_.contentId,
            new ToOneGetter<ErrorRecord, Content>() {
                @Override
                public ToOne<Content> getToOne(ErrorRecord entity) {
                    return entity.getContent();
                }
            });

}
